// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: livekit_room.proto

package livekit

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateRoomRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRoomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoomRequestMultiError, or nil if none found.
func (m *CreateRoomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for ConfigName

	// no validation rules for EmptyTimeout

	// no validation rules for DepartureTimeout

	// no validation rules for MaxParticipants

	// no validation rules for NodeId

	// no validation rules for Metadata

	if all {
		switch v := interface{}(m.GetEgress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRoomRequestValidationError{
					field:  "Egress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRoomRequestValidationError{
					field:  "Egress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEgress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRoomRequestValidationError{
				field:  "Egress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAgent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRoomRequestValidationError{
					field:  "Agent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRoomRequestValidationError{
					field:  "Agent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAgent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRoomRequestValidationError{
				field:  "Agent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MinPlayoutDelay

	// no validation rules for MaxPlayoutDelay

	// no validation rules for SyncStreams

	// no validation rules for ReplayEnabled

	if len(errors) > 0 {
		return CreateRoomRequestMultiError(errors)
	}

	return nil
}

// CreateRoomRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRoomRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRoomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoomRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoomRequestMultiError) AllErrors() []error { return m }

// CreateRoomRequestValidationError is the validation error returned by
// CreateRoomRequest.Validate if the designated constraints aren't met.
type CreateRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoomRequestValidationError) ErrorName() string {
	return "CreateRoomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoomRequestValidationError{}

// Validate checks the field values on RoomEgress with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoomEgress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomEgress with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoomEgressMultiError, or
// nil if none found.
func (m *RoomEgress) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomEgress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomEgressValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomEgressValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomEgressValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetParticipant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomEgressValidationError{
					field:  "Participant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomEgressValidationError{
					field:  "Participant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParticipant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomEgressValidationError{
				field:  "Participant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTracks()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomEgressValidationError{
					field:  "Tracks",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomEgressValidationError{
					field:  "Tracks",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTracks()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomEgressValidationError{
				field:  "Tracks",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RoomEgressMultiError(errors)
	}

	return nil
}

// RoomEgressMultiError is an error wrapping multiple validation errors
// returned by RoomEgress.ValidateAll() if the designated constraints aren't met.
type RoomEgressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomEgressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomEgressMultiError) AllErrors() []error { return m }

// RoomEgressValidationError is the validation error returned by
// RoomEgress.Validate if the designated constraints aren't met.
type RoomEgressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomEgressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomEgressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomEgressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomEgressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomEgressValidationError) ErrorName() string { return "RoomEgressValidationError" }

// Error satisfies the builtin error interface
func (e RoomEgressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomEgress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomEgressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomEgressValidationError{}

// Validate checks the field values on RoomAgent with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoomAgent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomAgent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoomAgentMultiError, or nil
// if none found.
func (m *RoomAgent) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomAgent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDispatches() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoomAgentValidationError{
						field:  fmt.Sprintf("Dispatches[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoomAgentValidationError{
						field:  fmt.Sprintf("Dispatches[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoomAgentValidationError{
					field:  fmt.Sprintf("Dispatches[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RoomAgentMultiError(errors)
	}

	return nil
}

// RoomAgentMultiError is an error wrapping multiple validation errors returned
// by RoomAgent.ValidateAll() if the designated constraints aren't met.
type RoomAgentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomAgentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomAgentMultiError) AllErrors() []error { return m }

// RoomAgentValidationError is the validation error returned by
// RoomAgent.Validate if the designated constraints aren't met.
type RoomAgentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomAgentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomAgentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomAgentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomAgentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomAgentValidationError) ErrorName() string { return "RoomAgentValidationError" }

// Error satisfies the builtin error interface
func (e RoomAgentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomAgent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomAgentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomAgentValidationError{}

// Validate checks the field values on ListRoomsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRoomsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoomsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoomsRequestMultiError, or nil if none found.
func (m *ListRoomsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoomsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListRoomsRequestMultiError(errors)
	}

	return nil
}

// ListRoomsRequestMultiError is an error wrapping multiple validation errors
// returned by ListRoomsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRoomsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoomsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoomsRequestMultiError) AllErrors() []error { return m }

// ListRoomsRequestValidationError is the validation error returned by
// ListRoomsRequest.Validate if the designated constraints aren't met.
type ListRoomsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoomsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoomsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoomsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoomsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoomsRequestValidationError) ErrorName() string { return "ListRoomsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRoomsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoomsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoomsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoomsRequestValidationError{}

// Validate checks the field values on ListRoomsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRoomsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoomsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRoomsResponseMultiError, or nil if none found.
func (m *ListRoomsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoomsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRooms() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRoomsResponseValidationError{
						field:  fmt.Sprintf("Rooms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRoomsResponseValidationError{
						field:  fmt.Sprintf("Rooms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRoomsResponseValidationError{
					field:  fmt.Sprintf("Rooms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRoomsResponseMultiError(errors)
	}

	return nil
}

// ListRoomsResponseMultiError is an error wrapping multiple validation errors
// returned by ListRoomsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListRoomsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoomsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoomsResponseMultiError) AllErrors() []error { return m }

// ListRoomsResponseValidationError is the validation error returned by
// ListRoomsResponse.Validate if the designated constraints aren't met.
type ListRoomsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoomsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoomsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoomsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoomsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoomsResponseValidationError) ErrorName() string {
	return "ListRoomsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRoomsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoomsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoomsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoomsResponseValidationError{}

// Validate checks the field values on DeleteRoomRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoomRequestMultiError, or nil if none found.
func (m *DeleteRoomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Room

	if len(errors) > 0 {
		return DeleteRoomRequestMultiError(errors)
	}

	return nil
}

// DeleteRoomRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRoomRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoomRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoomRequestMultiError) AllErrors() []error { return m }

// DeleteRoomRequestValidationError is the validation error returned by
// DeleteRoomRequest.Validate if the designated constraints aren't met.
type DeleteRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoomRequestValidationError) ErrorName() string {
	return "DeleteRoomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoomRequestValidationError{}

// Validate checks the field values on DeleteRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoomResponseMultiError, or nil if none found.
func (m *DeleteRoomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRoomResponseMultiError(errors)
	}

	return nil
}

// DeleteRoomResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteRoomResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoomResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoomResponseMultiError) AllErrors() []error { return m }

// DeleteRoomResponseValidationError is the validation error returned by
// DeleteRoomResponse.Validate if the designated constraints aren't met.
type DeleteRoomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoomResponseValidationError) ErrorName() string {
	return "DeleteRoomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoomResponseValidationError{}

// Validate checks the field values on ListParticipantsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListParticipantsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListParticipantsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListParticipantsRequestMultiError, or nil if none found.
func (m *ListParticipantsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListParticipantsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Room

	if len(errors) > 0 {
		return ListParticipantsRequestMultiError(errors)
	}

	return nil
}

// ListParticipantsRequestMultiError is an error wrapping multiple validation
// errors returned by ListParticipantsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListParticipantsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListParticipantsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListParticipantsRequestMultiError) AllErrors() []error { return m }

// ListParticipantsRequestValidationError is the validation error returned by
// ListParticipantsRequest.Validate if the designated constraints aren't met.
type ListParticipantsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListParticipantsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListParticipantsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListParticipantsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListParticipantsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListParticipantsRequestValidationError) ErrorName() string {
	return "ListParticipantsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListParticipantsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListParticipantsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListParticipantsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListParticipantsRequestValidationError{}

// Validate checks the field values on ListParticipantsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListParticipantsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListParticipantsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListParticipantsResponseMultiError, or nil if none found.
func (m *ListParticipantsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListParticipantsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetParticipants() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListParticipantsResponseValidationError{
						field:  fmt.Sprintf("Participants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListParticipantsResponseValidationError{
						field:  fmt.Sprintf("Participants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListParticipantsResponseValidationError{
					field:  fmt.Sprintf("Participants[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListParticipantsResponseMultiError(errors)
	}

	return nil
}

// ListParticipantsResponseMultiError is an error wrapping multiple validation
// errors returned by ListParticipantsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListParticipantsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListParticipantsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListParticipantsResponseMultiError) AllErrors() []error { return m }

// ListParticipantsResponseValidationError is the validation error returned by
// ListParticipantsResponse.Validate if the designated constraints aren't met.
type ListParticipantsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListParticipantsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListParticipantsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListParticipantsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListParticipantsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListParticipantsResponseValidationError) ErrorName() string {
	return "ListParticipantsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListParticipantsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListParticipantsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListParticipantsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListParticipantsResponseValidationError{}

// Validate checks the field values on RoomParticipantIdentity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoomParticipantIdentity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomParticipantIdentity with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomParticipantIdentityMultiError, or nil if none found.
func (m *RoomParticipantIdentity) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomParticipantIdentity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Room

	// no validation rules for Identity

	if len(errors) > 0 {
		return RoomParticipantIdentityMultiError(errors)
	}

	return nil
}

// RoomParticipantIdentityMultiError is an error wrapping multiple validation
// errors returned by RoomParticipantIdentity.ValidateAll() if the designated
// constraints aren't met.
type RoomParticipantIdentityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomParticipantIdentityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomParticipantIdentityMultiError) AllErrors() []error { return m }

// RoomParticipantIdentityValidationError is the validation error returned by
// RoomParticipantIdentity.Validate if the designated constraints aren't met.
type RoomParticipantIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomParticipantIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomParticipantIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomParticipantIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomParticipantIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomParticipantIdentityValidationError) ErrorName() string {
	return "RoomParticipantIdentityValidationError"
}

// Error satisfies the builtin error interface
func (e RoomParticipantIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomParticipantIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomParticipantIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomParticipantIdentityValidationError{}

// Validate checks the field values on RemoveParticipantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveParticipantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveParticipantResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveParticipantResponseMultiError, or nil if none found.
func (m *RemoveParticipantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveParticipantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveParticipantResponseMultiError(errors)
	}

	return nil
}

// RemoveParticipantResponseMultiError is an error wrapping multiple validation
// errors returned by RemoveParticipantResponse.ValidateAll() if the
// designated constraints aren't met.
type RemoveParticipantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveParticipantResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveParticipantResponseMultiError) AllErrors() []error { return m }

// RemoveParticipantResponseValidationError is the validation error returned by
// RemoveParticipantResponse.Validate if the designated constraints aren't met.
type RemoveParticipantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveParticipantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveParticipantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveParticipantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveParticipantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveParticipantResponseValidationError) ErrorName() string {
	return "RemoveParticipantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveParticipantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveParticipantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveParticipantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveParticipantResponseValidationError{}

// Validate checks the field values on MuteRoomTrackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MuteRoomTrackRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MuteRoomTrackRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MuteRoomTrackRequestMultiError, or nil if none found.
func (m *MuteRoomTrackRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MuteRoomTrackRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Room

	// no validation rules for Identity

	// no validation rules for TrackSid

	// no validation rules for Muted

	if len(errors) > 0 {
		return MuteRoomTrackRequestMultiError(errors)
	}

	return nil
}

// MuteRoomTrackRequestMultiError is an error wrapping multiple validation
// errors returned by MuteRoomTrackRequest.ValidateAll() if the designated
// constraints aren't met.
type MuteRoomTrackRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MuteRoomTrackRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MuteRoomTrackRequestMultiError) AllErrors() []error { return m }

// MuteRoomTrackRequestValidationError is the validation error returned by
// MuteRoomTrackRequest.Validate if the designated constraints aren't met.
type MuteRoomTrackRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MuteRoomTrackRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MuteRoomTrackRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MuteRoomTrackRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MuteRoomTrackRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MuteRoomTrackRequestValidationError) ErrorName() string {
	return "MuteRoomTrackRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MuteRoomTrackRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMuteRoomTrackRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MuteRoomTrackRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MuteRoomTrackRequestValidationError{}

// Validate checks the field values on MuteRoomTrackResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MuteRoomTrackResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MuteRoomTrackResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MuteRoomTrackResponseMultiError, or nil if none found.
func (m *MuteRoomTrackResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MuteRoomTrackResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTrack()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MuteRoomTrackResponseValidationError{
					field:  "Track",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MuteRoomTrackResponseValidationError{
					field:  "Track",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTrack()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MuteRoomTrackResponseValidationError{
				field:  "Track",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MuteRoomTrackResponseMultiError(errors)
	}

	return nil
}

// MuteRoomTrackResponseMultiError is an error wrapping multiple validation
// errors returned by MuteRoomTrackResponse.ValidateAll() if the designated
// constraints aren't met.
type MuteRoomTrackResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MuteRoomTrackResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MuteRoomTrackResponseMultiError) AllErrors() []error { return m }

// MuteRoomTrackResponseValidationError is the validation error returned by
// MuteRoomTrackResponse.Validate if the designated constraints aren't met.
type MuteRoomTrackResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MuteRoomTrackResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MuteRoomTrackResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MuteRoomTrackResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MuteRoomTrackResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MuteRoomTrackResponseValidationError) ErrorName() string {
	return "MuteRoomTrackResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MuteRoomTrackResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMuteRoomTrackResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MuteRoomTrackResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MuteRoomTrackResponseValidationError{}

// Validate checks the field values on UpdateParticipantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateParticipantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateParticipantRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateParticipantRequestMultiError, or nil if none found.
func (m *UpdateParticipantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateParticipantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Room

	// no validation rules for Identity

	// no validation rules for Metadata

	if all {
		switch v := interface{}(m.GetPermission()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateParticipantRequestValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateParticipantRequestValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermission()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateParticipantRequestValidationError{
				field:  "Permission",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Attributes

	if len(errors) > 0 {
		return UpdateParticipantRequestMultiError(errors)
	}

	return nil
}

// UpdateParticipantRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateParticipantRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateParticipantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateParticipantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateParticipantRequestMultiError) AllErrors() []error { return m }

// UpdateParticipantRequestValidationError is the validation error returned by
// UpdateParticipantRequest.Validate if the designated constraints aren't met.
type UpdateParticipantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateParticipantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateParticipantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateParticipantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateParticipantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateParticipantRequestValidationError) ErrorName() string {
	return "UpdateParticipantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateParticipantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateParticipantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateParticipantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateParticipantRequestValidationError{}

// Validate checks the field values on UpdateSubscriptionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSubscriptionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSubscriptionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSubscriptionsRequestMultiError, or nil if none found.
func (m *UpdateSubscriptionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSubscriptionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Room

	// no validation rules for Identity

	// no validation rules for Subscribe

	for idx, item := range m.GetParticipantTracks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateSubscriptionsRequestValidationError{
						field:  fmt.Sprintf("ParticipantTracks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateSubscriptionsRequestValidationError{
						field:  fmt.Sprintf("ParticipantTracks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateSubscriptionsRequestValidationError{
					field:  fmt.Sprintf("ParticipantTracks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateSubscriptionsRequestMultiError(errors)
	}

	return nil
}

// UpdateSubscriptionsRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateSubscriptionsRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateSubscriptionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSubscriptionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSubscriptionsRequestMultiError) AllErrors() []error { return m }

// UpdateSubscriptionsRequestValidationError is the validation error returned
// by UpdateSubscriptionsRequest.Validate if the designated constraints aren't met.
type UpdateSubscriptionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSubscriptionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSubscriptionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSubscriptionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSubscriptionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSubscriptionsRequestValidationError) ErrorName() string {
	return "UpdateSubscriptionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSubscriptionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSubscriptionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSubscriptionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSubscriptionsRequestValidationError{}

// Validate checks the field values on UpdateSubscriptionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSubscriptionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSubscriptionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSubscriptionsResponseMultiError, or nil if none found.
func (m *UpdateSubscriptionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSubscriptionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateSubscriptionsResponseMultiError(errors)
	}

	return nil
}

// UpdateSubscriptionsResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateSubscriptionsResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateSubscriptionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSubscriptionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSubscriptionsResponseMultiError) AllErrors() []error { return m }

// UpdateSubscriptionsResponseValidationError is the validation error returned
// by UpdateSubscriptionsResponse.Validate if the designated constraints
// aren't met.
type UpdateSubscriptionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSubscriptionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSubscriptionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSubscriptionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSubscriptionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSubscriptionsResponseValidationError) ErrorName() string {
	return "UpdateSubscriptionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSubscriptionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSubscriptionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSubscriptionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSubscriptionsResponseValidationError{}

// Validate checks the field values on SendDataRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendDataRequestMultiError, or nil if none found.
func (m *SendDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Room

	// no validation rules for Data

	// no validation rules for Kind

	if m.Topic != nil {
		// no validation rules for Topic
	}

	if len(errors) > 0 {
		return SendDataRequestMultiError(errors)
	}

	return nil
}

// SendDataRequestMultiError is an error wrapping multiple validation errors
// returned by SendDataRequest.ValidateAll() if the designated constraints
// aren't met.
type SendDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendDataRequestMultiError) AllErrors() []error { return m }

// SendDataRequestValidationError is the validation error returned by
// SendDataRequest.Validate if the designated constraints aren't met.
type SendDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendDataRequestValidationError) ErrorName() string { return "SendDataRequestValidationError" }

// Error satisfies the builtin error interface
func (e SendDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendDataRequestValidationError{}

// Validate checks the field values on SendDataResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendDataResponseMultiError, or nil if none found.
func (m *SendDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendDataResponseMultiError(errors)
	}

	return nil
}

// SendDataResponseMultiError is an error wrapping multiple validation errors
// returned by SendDataResponse.ValidateAll() if the designated constraints
// aren't met.
type SendDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendDataResponseMultiError) AllErrors() []error { return m }

// SendDataResponseValidationError is the validation error returned by
// SendDataResponse.Validate if the designated constraints aren't met.
type SendDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendDataResponseValidationError) ErrorName() string { return "SendDataResponseValidationError" }

// Error satisfies the builtin error interface
func (e SendDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendDataResponseValidationError{}

// Validate checks the field values on UpdateRoomMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoomMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoomMetadataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoomMetadataRequestMultiError, or nil if none found.
func (m *UpdateRoomMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoomMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Room

	// no validation rules for Metadata

	if len(errors) > 0 {
		return UpdateRoomMetadataRequestMultiError(errors)
	}

	return nil
}

// UpdateRoomMetadataRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateRoomMetadataRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateRoomMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoomMetadataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoomMetadataRequestMultiError) AllErrors() []error { return m }

// UpdateRoomMetadataRequestValidationError is the validation error returned by
// UpdateRoomMetadataRequest.Validate if the designated constraints aren't met.
type UpdateRoomMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoomMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoomMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoomMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoomMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoomMetadataRequestValidationError) ErrorName() string {
	return "UpdateRoomMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoomMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoomMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoomMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoomMetadataRequestValidationError{}

// Validate checks the field values on RoomConfiguration with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoomConfiguration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomConfiguration with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomConfigurationMultiError, or nil if none found.
func (m *RoomConfiguration) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomConfiguration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for EmptyTimeout

	// no validation rules for DepartureTimeout

	// no validation rules for MaxParticipants

	if all {
		switch v := interface{}(m.GetEgress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomConfigurationValidationError{
					field:  "Egress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomConfigurationValidationError{
					field:  "Egress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEgress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomConfigurationValidationError{
				field:  "Egress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAgent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomConfigurationValidationError{
					field:  "Agent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomConfigurationValidationError{
					field:  "Agent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAgent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomConfigurationValidationError{
				field:  "Agent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MinPlayoutDelay

	// no validation rules for MaxPlayoutDelay

	// no validation rules for SyncStreams

	if len(errors) > 0 {
		return RoomConfigurationMultiError(errors)
	}

	return nil
}

// RoomConfigurationMultiError is an error wrapping multiple validation errors
// returned by RoomConfiguration.ValidateAll() if the designated constraints
// aren't met.
type RoomConfigurationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomConfigurationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomConfigurationMultiError) AllErrors() []error { return m }

// RoomConfigurationValidationError is the validation error returned by
// RoomConfiguration.Validate if the designated constraints aren't met.
type RoomConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomConfigurationValidationError) ErrorName() string {
	return "RoomConfigurationValidationError"
}

// Error satisfies the builtin error interface
func (e RoomConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomConfigurationValidationError{}
