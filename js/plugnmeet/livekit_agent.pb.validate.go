// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: livekit_agent.proto

package livekit

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Job with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Job) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Job with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in JobMultiError, or nil if none found.
func (m *Job) ValidateAll() error {
	return m.validate(true)
}

func (m *Job) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DispatchId

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Namespace

	// no validation rules for Metadata

	// no validation rules for AgentName

	if all {
		switch v := interface{}(m.GetState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Participant != nil {

		if all {
			switch v := interface{}(m.GetParticipant()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobValidationError{
						field:  "Participant",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobValidationError{
						field:  "Participant",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetParticipant()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobValidationError{
					field:  "Participant",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return JobMultiError(errors)
	}

	return nil
}

// JobMultiError is an error wrapping multiple validation errors returned by
// Job.ValidateAll() if the designated constraints aren't met.
type JobMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobMultiError) AllErrors() []error { return m }

// JobValidationError is the validation error returned by Job.Validate if the
// designated constraints aren't met.
type JobValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobValidationError) ErrorName() string { return "JobValidationError" }

// Error satisfies the builtin error interface
func (e JobValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJob.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobValidationError{}

// Validate checks the field values on JobState with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JobState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobState with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JobStateMultiError, or nil
// if none found.
func (m *JobState) ValidateAll() error {
	return m.validate(true)
}

func (m *JobState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Error

	// no validation rules for StartedAt

	// no validation rules for EndedAt

	// no validation rules for UpdatedAt

	// no validation rules for ParticipantIdentity

	if len(errors) > 0 {
		return JobStateMultiError(errors)
	}

	return nil
}

// JobStateMultiError is an error wrapping multiple validation errors returned
// by JobState.ValidateAll() if the designated constraints aren't met.
type JobStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobStateMultiError) AllErrors() []error { return m }

// JobStateValidationError is the validation error returned by
// JobState.Validate if the designated constraints aren't met.
type JobStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobStateValidationError) ErrorName() string { return "JobStateValidationError" }

// Error satisfies the builtin error interface
func (e JobStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobStateValidationError{}

// Validate checks the field values on WorkerMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WorkerMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkerMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WorkerMessageMultiError, or
// nil if none found.
func (m *WorkerMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkerMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Message.(type) {
	case *WorkerMessage_Register:
		if v == nil {
			err := WorkerMessageValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRegister()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorkerMessageValidationError{
						field:  "Register",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorkerMessageValidationError{
						field:  "Register",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRegister()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkerMessageValidationError{
					field:  "Register",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WorkerMessage_Availability:
		if v == nil {
			err := WorkerMessageValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAvailability()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorkerMessageValidationError{
						field:  "Availability",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorkerMessageValidationError{
						field:  "Availability",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAvailability()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkerMessageValidationError{
					field:  "Availability",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WorkerMessage_UpdateWorker:
		if v == nil {
			err := WorkerMessageValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUpdateWorker()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorkerMessageValidationError{
						field:  "UpdateWorker",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorkerMessageValidationError{
						field:  "UpdateWorker",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdateWorker()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkerMessageValidationError{
					field:  "UpdateWorker",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WorkerMessage_UpdateJob:
		if v == nil {
			err := WorkerMessageValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUpdateJob()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorkerMessageValidationError{
						field:  "UpdateJob",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorkerMessageValidationError{
						field:  "UpdateJob",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdateJob()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkerMessageValidationError{
					field:  "UpdateJob",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WorkerMessage_Ping:
		if v == nil {
			err := WorkerMessageValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPing()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorkerMessageValidationError{
						field:  "Ping",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorkerMessageValidationError{
						field:  "Ping",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPing()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkerMessageValidationError{
					field:  "Ping",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WorkerMessage_SimulateJob:
		if v == nil {
			err := WorkerMessageValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSimulateJob()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorkerMessageValidationError{
						field:  "SimulateJob",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorkerMessageValidationError{
						field:  "SimulateJob",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSimulateJob()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkerMessageValidationError{
					field:  "SimulateJob",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WorkerMessage_MigrateJob:
		if v == nil {
			err := WorkerMessageValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMigrateJob()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorkerMessageValidationError{
						field:  "MigrateJob",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorkerMessageValidationError{
						field:  "MigrateJob",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMigrateJob()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkerMessageValidationError{
					field:  "MigrateJob",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return WorkerMessageMultiError(errors)
	}

	return nil
}

// WorkerMessageMultiError is an error wrapping multiple validation errors
// returned by WorkerMessage.ValidateAll() if the designated constraints
// aren't met.
type WorkerMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkerMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkerMessageMultiError) AllErrors() []error { return m }

// WorkerMessageValidationError is the validation error returned by
// WorkerMessage.Validate if the designated constraints aren't met.
type WorkerMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkerMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkerMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkerMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkerMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkerMessageValidationError) ErrorName() string { return "WorkerMessageValidationError" }

// Error satisfies the builtin error interface
func (e WorkerMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkerMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkerMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkerMessageValidationError{}

// Validate checks the field values on ServerMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServerMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServerMessageMultiError, or
// nil if none found.
func (m *ServerMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Message.(type) {
	case *ServerMessage_Register:
		if v == nil {
			err := ServerMessageValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRegister()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "Register",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "Register",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRegister()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerMessageValidationError{
					field:  "Register",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerMessage_Availability:
		if v == nil {
			err := ServerMessageValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAvailability()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "Availability",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "Availability",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAvailability()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerMessageValidationError{
					field:  "Availability",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerMessage_Assignment:
		if v == nil {
			err := ServerMessageValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAssignment()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "Assignment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "Assignment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAssignment()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerMessageValidationError{
					field:  "Assignment",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerMessage_Termination:
		if v == nil {
			err := ServerMessageValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTermination()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "Termination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "Termination",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTermination()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerMessageValidationError{
					field:  "Termination",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerMessage_Pong:
		if v == nil {
			err := ServerMessageValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPong()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "Pong",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerMessageValidationError{
						field:  "Pong",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPong()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerMessageValidationError{
					field:  "Pong",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ServerMessageMultiError(errors)
	}

	return nil
}

// ServerMessageMultiError is an error wrapping multiple validation errors
// returned by ServerMessage.ValidateAll() if the designated constraints
// aren't met.
type ServerMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerMessageMultiError) AllErrors() []error { return m }

// ServerMessageValidationError is the validation error returned by
// ServerMessage.Validate if the designated constraints aren't met.
type ServerMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerMessageValidationError) ErrorName() string { return "ServerMessageValidationError" }

// Error satisfies the builtin error interface
func (e ServerMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerMessageValidationError{}

// Validate checks the field values on SimulateJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SimulateJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SimulateJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SimulateJobRequestMultiError, or nil if none found.
func (m *SimulateJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SimulateJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SimulateJobRequestValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SimulateJobRequestValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SimulateJobRequestValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetParticipant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SimulateJobRequestValidationError{
					field:  "Participant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SimulateJobRequestValidationError{
					field:  "Participant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParticipant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SimulateJobRequestValidationError{
				field:  "Participant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SimulateJobRequestMultiError(errors)
	}

	return nil
}

// SimulateJobRequestMultiError is an error wrapping multiple validation errors
// returned by SimulateJobRequest.ValidateAll() if the designated constraints
// aren't met.
type SimulateJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SimulateJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SimulateJobRequestMultiError) AllErrors() []error { return m }

// SimulateJobRequestValidationError is the validation error returned by
// SimulateJobRequest.Validate if the designated constraints aren't met.
type SimulateJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SimulateJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SimulateJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SimulateJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SimulateJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SimulateJobRequestValidationError) ErrorName() string {
	return "SimulateJobRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SimulateJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSimulateJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SimulateJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SimulateJobRequestValidationError{}

// Validate checks the field values on WorkerPing with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WorkerPing) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkerPing with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WorkerPingMultiError, or
// nil if none found.
func (m *WorkerPing) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkerPing) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timestamp

	if len(errors) > 0 {
		return WorkerPingMultiError(errors)
	}

	return nil
}

// WorkerPingMultiError is an error wrapping multiple validation errors
// returned by WorkerPing.ValidateAll() if the designated constraints aren't met.
type WorkerPingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkerPingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkerPingMultiError) AllErrors() []error { return m }

// WorkerPingValidationError is the validation error returned by
// WorkerPing.Validate if the designated constraints aren't met.
type WorkerPingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkerPingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkerPingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkerPingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkerPingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkerPingValidationError) ErrorName() string { return "WorkerPingValidationError" }

// Error satisfies the builtin error interface
func (e WorkerPingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkerPing.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkerPingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkerPingValidationError{}

// Validate checks the field values on WorkerPong with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WorkerPong) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkerPong with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WorkerPongMultiError, or
// nil if none found.
func (m *WorkerPong) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkerPong) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LastTimestamp

	// no validation rules for Timestamp

	if len(errors) > 0 {
		return WorkerPongMultiError(errors)
	}

	return nil
}

// WorkerPongMultiError is an error wrapping multiple validation errors
// returned by WorkerPong.ValidateAll() if the designated constraints aren't met.
type WorkerPongMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkerPongMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkerPongMultiError) AllErrors() []error { return m }

// WorkerPongValidationError is the validation error returned by
// WorkerPong.Validate if the designated constraints aren't met.
type WorkerPongValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkerPongValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkerPongValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkerPongValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkerPongValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkerPongValidationError) ErrorName() string { return "WorkerPongValidationError" }

// Error satisfies the builtin error interface
func (e WorkerPongValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkerPong.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkerPongValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkerPongValidationError{}

// Validate checks the field values on RegisterWorkerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterWorkerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterWorkerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterWorkerRequestMultiError, or nil if none found.
func (m *RegisterWorkerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterWorkerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for AgentName

	// no validation rules for Version

	// no validation rules for PingInterval

	if all {
		switch v := interface{}(m.GetAllowedPermissions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterWorkerRequestValidationError{
					field:  "AllowedPermissions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterWorkerRequestValidationError{
					field:  "AllowedPermissions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAllowedPermissions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterWorkerRequestValidationError{
				field:  "AllowedPermissions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Namespace != nil {
		// no validation rules for Namespace
	}

	if len(errors) > 0 {
		return RegisterWorkerRequestMultiError(errors)
	}

	return nil
}

// RegisterWorkerRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterWorkerRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterWorkerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterWorkerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterWorkerRequestMultiError) AllErrors() []error { return m }

// RegisterWorkerRequestValidationError is the validation error returned by
// RegisterWorkerRequest.Validate if the designated constraints aren't met.
type RegisterWorkerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterWorkerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterWorkerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterWorkerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterWorkerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterWorkerRequestValidationError) ErrorName() string {
	return "RegisterWorkerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterWorkerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterWorkerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterWorkerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterWorkerRequestValidationError{}

// Validate checks the field values on RegisterWorkerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterWorkerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterWorkerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterWorkerResponseMultiError, or nil if none found.
func (m *RegisterWorkerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterWorkerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkerId

	if all {
		switch v := interface{}(m.GetServerInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterWorkerResponseValidationError{
					field:  "ServerInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterWorkerResponseValidationError{
					field:  "ServerInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServerInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterWorkerResponseValidationError{
				field:  "ServerInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterWorkerResponseMultiError(errors)
	}

	return nil
}

// RegisterWorkerResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterWorkerResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterWorkerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterWorkerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterWorkerResponseMultiError) AllErrors() []error { return m }

// RegisterWorkerResponseValidationError is the validation error returned by
// RegisterWorkerResponse.Validate if the designated constraints aren't met.
type RegisterWorkerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterWorkerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterWorkerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterWorkerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterWorkerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterWorkerResponseValidationError) ErrorName() string {
	return "RegisterWorkerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterWorkerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterWorkerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterWorkerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterWorkerResponseValidationError{}

// Validate checks the field values on MigrateJobRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MigrateJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MigrateJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MigrateJobRequestMultiError, or nil if none found.
func (m *MigrateJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MigrateJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MigrateJobRequestMultiError(errors)
	}

	return nil
}

// MigrateJobRequestMultiError is an error wrapping multiple validation errors
// returned by MigrateJobRequest.ValidateAll() if the designated constraints
// aren't met.
type MigrateJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MigrateJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MigrateJobRequestMultiError) AllErrors() []error { return m }

// MigrateJobRequestValidationError is the validation error returned by
// MigrateJobRequest.Validate if the designated constraints aren't met.
type MigrateJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MigrateJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MigrateJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MigrateJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MigrateJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MigrateJobRequestValidationError) ErrorName() string {
	return "MigrateJobRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MigrateJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMigrateJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MigrateJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MigrateJobRequestValidationError{}

// Validate checks the field values on AvailabilityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AvailabilityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AvailabilityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AvailabilityRequestMultiError, or nil if none found.
func (m *AvailabilityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AvailabilityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJob()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AvailabilityRequestValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AvailabilityRequestValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AvailabilityRequestValidationError{
				field:  "Job",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Resuming

	if len(errors) > 0 {
		return AvailabilityRequestMultiError(errors)
	}

	return nil
}

// AvailabilityRequestMultiError is an error wrapping multiple validation
// errors returned by AvailabilityRequest.ValidateAll() if the designated
// constraints aren't met.
type AvailabilityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AvailabilityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AvailabilityRequestMultiError) AllErrors() []error { return m }

// AvailabilityRequestValidationError is the validation error returned by
// AvailabilityRequest.Validate if the designated constraints aren't met.
type AvailabilityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AvailabilityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AvailabilityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AvailabilityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AvailabilityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AvailabilityRequestValidationError) ErrorName() string {
	return "AvailabilityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AvailabilityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAvailabilityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AvailabilityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AvailabilityRequestValidationError{}

// Validate checks the field values on AvailabilityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AvailabilityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AvailabilityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AvailabilityResponseMultiError, or nil if none found.
func (m *AvailabilityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AvailabilityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	// no validation rules for Available

	// no validation rules for SupportsResume

	// no validation rules for ParticipantName

	// no validation rules for ParticipantIdentity

	// no validation rules for ParticipantMetadata

	// no validation rules for ParticipantAttributes

	if len(errors) > 0 {
		return AvailabilityResponseMultiError(errors)
	}

	return nil
}

// AvailabilityResponseMultiError is an error wrapping multiple validation
// errors returned by AvailabilityResponse.ValidateAll() if the designated
// constraints aren't met.
type AvailabilityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AvailabilityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AvailabilityResponseMultiError) AllErrors() []error { return m }

// AvailabilityResponseValidationError is the validation error returned by
// AvailabilityResponse.Validate if the designated constraints aren't met.
type AvailabilityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AvailabilityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AvailabilityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AvailabilityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AvailabilityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AvailabilityResponseValidationError) ErrorName() string {
	return "AvailabilityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AvailabilityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAvailabilityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AvailabilityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AvailabilityResponseValidationError{}

// Validate checks the field values on UpdateJobStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateJobStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateJobStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateJobStatusMultiError, or nil if none found.
func (m *UpdateJobStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateJobStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	// no validation rules for Status

	// no validation rules for Error

	if len(errors) > 0 {
		return UpdateJobStatusMultiError(errors)
	}

	return nil
}

// UpdateJobStatusMultiError is an error wrapping multiple validation errors
// returned by UpdateJobStatus.ValidateAll() if the designated constraints
// aren't met.
type UpdateJobStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateJobStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateJobStatusMultiError) AllErrors() []error { return m }

// UpdateJobStatusValidationError is the validation error returned by
// UpdateJobStatus.Validate if the designated constraints aren't met.
type UpdateJobStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateJobStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateJobStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateJobStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateJobStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateJobStatusValidationError) ErrorName() string { return "UpdateJobStatusValidationError" }

// Error satisfies the builtin error interface
func (e UpdateJobStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateJobStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateJobStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateJobStatusValidationError{}

// Validate checks the field values on UpdateWorkerStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWorkerStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWorkerStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWorkerStatusMultiError, or nil if none found.
func (m *UpdateWorkerStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkerStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Load

	// no validation rules for JobCount

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return UpdateWorkerStatusMultiError(errors)
	}

	return nil
}

// UpdateWorkerStatusMultiError is an error wrapping multiple validation errors
// returned by UpdateWorkerStatus.ValidateAll() if the designated constraints
// aren't met.
type UpdateWorkerStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkerStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkerStatusMultiError) AllErrors() []error { return m }

// UpdateWorkerStatusValidationError is the validation error returned by
// UpdateWorkerStatus.Validate if the designated constraints aren't met.
type UpdateWorkerStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkerStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkerStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkerStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkerStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkerStatusValidationError) ErrorName() string {
	return "UpdateWorkerStatusValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkerStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkerStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkerStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkerStatusValidationError{}

// Validate checks the field values on JobAssignment with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JobAssignment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobAssignment with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JobAssignmentMultiError, or
// nil if none found.
func (m *JobAssignment) ValidateAll() error {
	return m.validate(true)
}

func (m *JobAssignment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJob()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobAssignmentValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobAssignmentValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobAssignmentValidationError{
				field:  "Job",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Token

	if m.Url != nil {
		// no validation rules for Url
	}

	if len(errors) > 0 {
		return JobAssignmentMultiError(errors)
	}

	return nil
}

// JobAssignmentMultiError is an error wrapping multiple validation errors
// returned by JobAssignment.ValidateAll() if the designated constraints
// aren't met.
type JobAssignmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobAssignmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobAssignmentMultiError) AllErrors() []error { return m }

// JobAssignmentValidationError is the validation error returned by
// JobAssignment.Validate if the designated constraints aren't met.
type JobAssignmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobAssignmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobAssignmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobAssignmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobAssignmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobAssignmentValidationError) ErrorName() string { return "JobAssignmentValidationError" }

// Error satisfies the builtin error interface
func (e JobAssignmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobAssignment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobAssignmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobAssignmentValidationError{}

// Validate checks the field values on JobTermination with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JobTermination) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobTermination with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JobTerminationMultiError,
// or nil if none found.
func (m *JobTermination) ValidateAll() error {
	return m.validate(true)
}

func (m *JobTermination) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	if len(errors) > 0 {
		return JobTerminationMultiError(errors)
	}

	return nil
}

// JobTerminationMultiError is an error wrapping multiple validation errors
// returned by JobTermination.ValidateAll() if the designated constraints
// aren't met.
type JobTerminationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobTerminationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobTerminationMultiError) AllErrors() []error { return m }

// JobTerminationValidationError is the validation error returned by
// JobTermination.Validate if the designated constraints aren't met.
type JobTerminationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobTerminationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobTerminationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobTerminationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobTerminationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobTerminationValidationError) ErrorName() string { return "JobTerminationValidationError" }

// Error satisfies the builtin error interface
func (e JobTerminationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobTermination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobTerminationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobTerminationValidationError{}
