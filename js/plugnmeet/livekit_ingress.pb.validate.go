// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: livekit_ingress.proto

package livekit

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateIngressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateIngressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateIngressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateIngressRequestMultiError, or nil if none found.
func (m *CreateIngressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateIngressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InputType

	// no validation rules for Url

	// no validation rules for Name

	// no validation rules for RoomName

	// no validation rules for ParticipantIdentity

	// no validation rules for ParticipantName

	// no validation rules for ParticipantMetadata

	// no validation rules for BypassTranscoding

	if all {
		switch v := interface{}(m.GetAudio()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateIngressRequestValidationError{
					field:  "Audio",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateIngressRequestValidationError{
					field:  "Audio",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAudio()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateIngressRequestValidationError{
				field:  "Audio",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVideo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateIngressRequestValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateIngressRequestValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVideo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateIngressRequestValidationError{
				field:  "Video",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.EnableTranscoding != nil {
		// no validation rules for EnableTranscoding
	}

	if len(errors) > 0 {
		return CreateIngressRequestMultiError(errors)
	}

	return nil
}

// CreateIngressRequestMultiError is an error wrapping multiple validation
// errors returned by CreateIngressRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateIngressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateIngressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateIngressRequestMultiError) AllErrors() []error { return m }

// CreateIngressRequestValidationError is the validation error returned by
// CreateIngressRequest.Validate if the designated constraints aren't met.
type CreateIngressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateIngressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateIngressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateIngressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateIngressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateIngressRequestValidationError) ErrorName() string {
	return "CreateIngressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateIngressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateIngressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateIngressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateIngressRequestValidationError{}

// Validate checks the field values on IngressAudioOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IngressAudioOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IngressAudioOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IngressAudioOptionsMultiError, or nil if none found.
func (m *IngressAudioOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *IngressAudioOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Source

	switch v := m.EncodingOptions.(type) {
	case *IngressAudioOptions_Preset:
		if v == nil {
			err := IngressAudioOptionsValidationError{
				field:  "EncodingOptions",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Preset
	case *IngressAudioOptions_Options:
		if v == nil {
			err := IngressAudioOptionsValidationError{
				field:  "EncodingOptions",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOptions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IngressAudioOptionsValidationError{
						field:  "Options",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IngressAudioOptionsValidationError{
						field:  "Options",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IngressAudioOptionsValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return IngressAudioOptionsMultiError(errors)
	}

	return nil
}

// IngressAudioOptionsMultiError is an error wrapping multiple validation
// errors returned by IngressAudioOptions.ValidateAll() if the designated
// constraints aren't met.
type IngressAudioOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IngressAudioOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IngressAudioOptionsMultiError) AllErrors() []error { return m }

// IngressAudioOptionsValidationError is the validation error returned by
// IngressAudioOptions.Validate if the designated constraints aren't met.
type IngressAudioOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IngressAudioOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IngressAudioOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IngressAudioOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IngressAudioOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IngressAudioOptionsValidationError) ErrorName() string {
	return "IngressAudioOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e IngressAudioOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIngressAudioOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IngressAudioOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IngressAudioOptionsValidationError{}

// Validate checks the field values on IngressVideoOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IngressVideoOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IngressVideoOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IngressVideoOptionsMultiError, or nil if none found.
func (m *IngressVideoOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *IngressVideoOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Source

	switch v := m.EncodingOptions.(type) {
	case *IngressVideoOptions_Preset:
		if v == nil {
			err := IngressVideoOptionsValidationError{
				field:  "EncodingOptions",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Preset
	case *IngressVideoOptions_Options:
		if v == nil {
			err := IngressVideoOptionsValidationError{
				field:  "EncodingOptions",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOptions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IngressVideoOptionsValidationError{
						field:  "Options",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IngressVideoOptionsValidationError{
						field:  "Options",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IngressVideoOptionsValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return IngressVideoOptionsMultiError(errors)
	}

	return nil
}

// IngressVideoOptionsMultiError is an error wrapping multiple validation
// errors returned by IngressVideoOptions.ValidateAll() if the designated
// constraints aren't met.
type IngressVideoOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IngressVideoOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IngressVideoOptionsMultiError) AllErrors() []error { return m }

// IngressVideoOptionsValidationError is the validation error returned by
// IngressVideoOptions.Validate if the designated constraints aren't met.
type IngressVideoOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IngressVideoOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IngressVideoOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IngressVideoOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IngressVideoOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IngressVideoOptionsValidationError) ErrorName() string {
	return "IngressVideoOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e IngressVideoOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIngressVideoOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IngressVideoOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IngressVideoOptionsValidationError{}

// Validate checks the field values on IngressAudioEncodingOptions with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IngressAudioEncodingOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IngressAudioEncodingOptions with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IngressAudioEncodingOptionsMultiError, or nil if none found.
func (m *IngressAudioEncodingOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *IngressAudioEncodingOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AudioCodec

	// no validation rules for Bitrate

	// no validation rules for DisableDtx

	// no validation rules for Channels

	if len(errors) > 0 {
		return IngressAudioEncodingOptionsMultiError(errors)
	}

	return nil
}

// IngressAudioEncodingOptionsMultiError is an error wrapping multiple
// validation errors returned by IngressAudioEncodingOptions.ValidateAll() if
// the designated constraints aren't met.
type IngressAudioEncodingOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IngressAudioEncodingOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IngressAudioEncodingOptionsMultiError) AllErrors() []error { return m }

// IngressAudioEncodingOptionsValidationError is the validation error returned
// by IngressAudioEncodingOptions.Validate if the designated constraints
// aren't met.
type IngressAudioEncodingOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IngressAudioEncodingOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IngressAudioEncodingOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IngressAudioEncodingOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IngressAudioEncodingOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IngressAudioEncodingOptionsValidationError) ErrorName() string {
	return "IngressAudioEncodingOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e IngressAudioEncodingOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIngressAudioEncodingOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IngressAudioEncodingOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IngressAudioEncodingOptionsValidationError{}

// Validate checks the field values on IngressVideoEncodingOptions with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IngressVideoEncodingOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IngressVideoEncodingOptions with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IngressVideoEncodingOptionsMultiError, or nil if none found.
func (m *IngressVideoEncodingOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *IngressVideoEncodingOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VideoCodec

	// no validation rules for FrameRate

	for idx, item := range m.GetLayers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IngressVideoEncodingOptionsValidationError{
						field:  fmt.Sprintf("Layers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IngressVideoEncodingOptionsValidationError{
						field:  fmt.Sprintf("Layers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IngressVideoEncodingOptionsValidationError{
					field:  fmt.Sprintf("Layers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IngressVideoEncodingOptionsMultiError(errors)
	}

	return nil
}

// IngressVideoEncodingOptionsMultiError is an error wrapping multiple
// validation errors returned by IngressVideoEncodingOptions.ValidateAll() if
// the designated constraints aren't met.
type IngressVideoEncodingOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IngressVideoEncodingOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IngressVideoEncodingOptionsMultiError) AllErrors() []error { return m }

// IngressVideoEncodingOptionsValidationError is the validation error returned
// by IngressVideoEncodingOptions.Validate if the designated constraints
// aren't met.
type IngressVideoEncodingOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IngressVideoEncodingOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IngressVideoEncodingOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IngressVideoEncodingOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IngressVideoEncodingOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IngressVideoEncodingOptionsValidationError) ErrorName() string {
	return "IngressVideoEncodingOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e IngressVideoEncodingOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIngressVideoEncodingOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IngressVideoEncodingOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IngressVideoEncodingOptionsValidationError{}

// Validate checks the field values on IngressInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IngressInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IngressInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IngressInfoMultiError, or
// nil if none found.
func (m *IngressInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *IngressInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IngressId

	// no validation rules for Name

	// no validation rules for StreamKey

	// no validation rules for Url

	// no validation rules for InputType

	// no validation rules for BypassTranscoding

	if all {
		switch v := interface{}(m.GetAudio()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IngressInfoValidationError{
					field:  "Audio",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IngressInfoValidationError{
					field:  "Audio",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAudio()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IngressInfoValidationError{
				field:  "Audio",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVideo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IngressInfoValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IngressInfoValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVideo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IngressInfoValidationError{
				field:  "Video",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RoomName

	// no validation rules for ParticipantIdentity

	// no validation rules for ParticipantName

	// no validation rules for ParticipantMetadata

	// no validation rules for Reusable

	if all {
		switch v := interface{}(m.GetState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IngressInfoValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IngressInfoValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IngressInfoValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.EnableTranscoding != nil {
		// no validation rules for EnableTranscoding
	}

	if len(errors) > 0 {
		return IngressInfoMultiError(errors)
	}

	return nil
}

// IngressInfoMultiError is an error wrapping multiple validation errors
// returned by IngressInfo.ValidateAll() if the designated constraints aren't met.
type IngressInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IngressInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IngressInfoMultiError) AllErrors() []error { return m }

// IngressInfoValidationError is the validation error returned by
// IngressInfo.Validate if the designated constraints aren't met.
type IngressInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IngressInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IngressInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IngressInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IngressInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IngressInfoValidationError) ErrorName() string { return "IngressInfoValidationError" }

// Error satisfies the builtin error interface
func (e IngressInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIngressInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IngressInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IngressInfoValidationError{}

// Validate checks the field values on IngressState with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IngressState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IngressState with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IngressStateMultiError, or
// nil if none found.
func (m *IngressState) ValidateAll() error {
	return m.validate(true)
}

func (m *IngressState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Error

	if all {
		switch v := interface{}(m.GetVideo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IngressStateValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IngressStateValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVideo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IngressStateValidationError{
				field:  "Video",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAudio()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IngressStateValidationError{
					field:  "Audio",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IngressStateValidationError{
					field:  "Audio",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAudio()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IngressStateValidationError{
				field:  "Audio",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RoomId

	// no validation rules for StartedAt

	// no validation rules for EndedAt

	// no validation rules for UpdatedAt

	// no validation rules for ResourceId

	for idx, item := range m.GetTracks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IngressStateValidationError{
						field:  fmt.Sprintf("Tracks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IngressStateValidationError{
						field:  fmt.Sprintf("Tracks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IngressStateValidationError{
					field:  fmt.Sprintf("Tracks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IngressStateMultiError(errors)
	}

	return nil
}

// IngressStateMultiError is an error wrapping multiple validation errors
// returned by IngressState.ValidateAll() if the designated constraints aren't met.
type IngressStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IngressStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IngressStateMultiError) AllErrors() []error { return m }

// IngressStateValidationError is the validation error returned by
// IngressState.Validate if the designated constraints aren't met.
type IngressStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IngressStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IngressStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IngressStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IngressStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IngressStateValidationError) ErrorName() string { return "IngressStateValidationError" }

// Error satisfies the builtin error interface
func (e IngressStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIngressState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IngressStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IngressStateValidationError{}

// Validate checks the field values on InputVideoState with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InputVideoState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InputVideoState with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InputVideoStateMultiError, or nil if none found.
func (m *InputVideoState) ValidateAll() error {
	return m.validate(true)
}

func (m *InputVideoState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MimeType

	// no validation rules for AverageBitrate

	// no validation rules for Width

	// no validation rules for Height

	// no validation rules for Framerate

	if len(errors) > 0 {
		return InputVideoStateMultiError(errors)
	}

	return nil
}

// InputVideoStateMultiError is an error wrapping multiple validation errors
// returned by InputVideoState.ValidateAll() if the designated constraints
// aren't met.
type InputVideoStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InputVideoStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InputVideoStateMultiError) AllErrors() []error { return m }

// InputVideoStateValidationError is the validation error returned by
// InputVideoState.Validate if the designated constraints aren't met.
type InputVideoStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InputVideoStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InputVideoStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InputVideoStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InputVideoStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InputVideoStateValidationError) ErrorName() string { return "InputVideoStateValidationError" }

// Error satisfies the builtin error interface
func (e InputVideoStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInputVideoState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InputVideoStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InputVideoStateValidationError{}

// Validate checks the field values on InputAudioState with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InputAudioState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InputAudioState with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InputAudioStateMultiError, or nil if none found.
func (m *InputAudioState) ValidateAll() error {
	return m.validate(true)
}

func (m *InputAudioState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MimeType

	// no validation rules for AverageBitrate

	// no validation rules for Channels

	// no validation rules for SampleRate

	if len(errors) > 0 {
		return InputAudioStateMultiError(errors)
	}

	return nil
}

// InputAudioStateMultiError is an error wrapping multiple validation errors
// returned by InputAudioState.ValidateAll() if the designated constraints
// aren't met.
type InputAudioStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InputAudioStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InputAudioStateMultiError) AllErrors() []error { return m }

// InputAudioStateValidationError is the validation error returned by
// InputAudioState.Validate if the designated constraints aren't met.
type InputAudioStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InputAudioStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InputAudioStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InputAudioStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InputAudioStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InputAudioStateValidationError) ErrorName() string { return "InputAudioStateValidationError" }

// Error satisfies the builtin error interface
func (e InputAudioStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInputAudioState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InputAudioStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InputAudioStateValidationError{}

// Validate checks the field values on UpdateIngressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateIngressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateIngressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateIngressRequestMultiError, or nil if none found.
func (m *UpdateIngressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateIngressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IngressId

	// no validation rules for Name

	// no validation rules for RoomName

	// no validation rules for ParticipantIdentity

	// no validation rules for ParticipantName

	// no validation rules for ParticipantMetadata

	if all {
		switch v := interface{}(m.GetAudio()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateIngressRequestValidationError{
					field:  "Audio",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateIngressRequestValidationError{
					field:  "Audio",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAudio()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateIngressRequestValidationError{
				field:  "Audio",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVideo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateIngressRequestValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateIngressRequestValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVideo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateIngressRequestValidationError{
				field:  "Video",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.BypassTranscoding != nil {
		// no validation rules for BypassTranscoding
	}

	if m.EnableTranscoding != nil {
		// no validation rules for EnableTranscoding
	}

	if len(errors) > 0 {
		return UpdateIngressRequestMultiError(errors)
	}

	return nil
}

// UpdateIngressRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateIngressRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateIngressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateIngressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateIngressRequestMultiError) AllErrors() []error { return m }

// UpdateIngressRequestValidationError is the validation error returned by
// UpdateIngressRequest.Validate if the designated constraints aren't met.
type UpdateIngressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateIngressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateIngressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateIngressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateIngressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateIngressRequestValidationError) ErrorName() string {
	return "UpdateIngressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateIngressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateIngressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateIngressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateIngressRequestValidationError{}

// Validate checks the field values on ListIngressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListIngressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListIngressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListIngressRequestMultiError, or nil if none found.
func (m *ListIngressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIngressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomName

	// no validation rules for IngressId

	if len(errors) > 0 {
		return ListIngressRequestMultiError(errors)
	}

	return nil
}

// ListIngressRequestMultiError is an error wrapping multiple validation errors
// returned by ListIngressRequest.ValidateAll() if the designated constraints
// aren't met.
type ListIngressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIngressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIngressRequestMultiError) AllErrors() []error { return m }

// ListIngressRequestValidationError is the validation error returned by
// ListIngressRequest.Validate if the designated constraints aren't met.
type ListIngressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIngressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIngressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIngressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIngressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIngressRequestValidationError) ErrorName() string {
	return "ListIngressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListIngressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIngressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIngressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIngressRequestValidationError{}

// Validate checks the field values on ListIngressResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListIngressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListIngressResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListIngressResponseMultiError, or nil if none found.
func (m *ListIngressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIngressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListIngressResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListIngressResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListIngressResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListIngressResponseMultiError(errors)
	}

	return nil
}

// ListIngressResponseMultiError is an error wrapping multiple validation
// errors returned by ListIngressResponse.ValidateAll() if the designated
// constraints aren't met.
type ListIngressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIngressResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIngressResponseMultiError) AllErrors() []error { return m }

// ListIngressResponseValidationError is the validation error returned by
// ListIngressResponse.Validate if the designated constraints aren't met.
type ListIngressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIngressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIngressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIngressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIngressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIngressResponseValidationError) ErrorName() string {
	return "ListIngressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListIngressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIngressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIngressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIngressResponseValidationError{}

// Validate checks the field values on DeleteIngressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteIngressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteIngressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteIngressRequestMultiError, or nil if none found.
func (m *DeleteIngressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteIngressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IngressId

	if len(errors) > 0 {
		return DeleteIngressRequestMultiError(errors)
	}

	return nil
}

// DeleteIngressRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteIngressRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteIngressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteIngressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteIngressRequestMultiError) AllErrors() []error { return m }

// DeleteIngressRequestValidationError is the validation error returned by
// DeleteIngressRequest.Validate if the designated constraints aren't met.
type DeleteIngressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteIngressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteIngressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteIngressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteIngressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteIngressRequestValidationError) ErrorName() string {
	return "DeleteIngressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteIngressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteIngressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteIngressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteIngressRequestValidationError{}
