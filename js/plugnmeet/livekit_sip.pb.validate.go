// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: livekit_sip.proto

package livekit

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateSIPTrunkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSIPTrunkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSIPTrunkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSIPTrunkRequestMultiError, or nil if none found.
func (m *CreateSIPTrunkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSIPTrunkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OutboundAddress

	// no validation rules for OutboundNumber

	// no validation rules for InboundUsername

	// no validation rules for InboundPassword

	// no validation rules for OutboundUsername

	// no validation rules for OutboundPassword

	// no validation rules for Name

	// no validation rules for Metadata

	if len(errors) > 0 {
		return CreateSIPTrunkRequestMultiError(errors)
	}

	return nil
}

// CreateSIPTrunkRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSIPTrunkRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSIPTrunkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSIPTrunkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSIPTrunkRequestMultiError) AllErrors() []error { return m }

// CreateSIPTrunkRequestValidationError is the validation error returned by
// CreateSIPTrunkRequest.Validate if the designated constraints aren't met.
type CreateSIPTrunkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSIPTrunkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSIPTrunkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSIPTrunkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSIPTrunkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSIPTrunkRequestValidationError) ErrorName() string {
	return "CreateSIPTrunkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSIPTrunkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSIPTrunkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSIPTrunkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSIPTrunkRequestValidationError{}

// Validate checks the field values on SIPTrunkInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SIPTrunkInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SIPTrunkInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SIPTrunkInfoMultiError, or
// nil if none found.
func (m *SIPTrunkInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SIPTrunkInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SipTrunkId

	// no validation rules for Kind

	// no validation rules for OutboundAddress

	// no validation rules for OutboundNumber

	// no validation rules for Transport

	// no validation rules for InboundUsername

	// no validation rules for InboundPassword

	// no validation rules for OutboundUsername

	// no validation rules for OutboundPassword

	// no validation rules for Name

	// no validation rules for Metadata

	if len(errors) > 0 {
		return SIPTrunkInfoMultiError(errors)
	}

	return nil
}

// SIPTrunkInfoMultiError is an error wrapping multiple validation errors
// returned by SIPTrunkInfo.ValidateAll() if the designated constraints aren't met.
type SIPTrunkInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SIPTrunkInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SIPTrunkInfoMultiError) AllErrors() []error { return m }

// SIPTrunkInfoValidationError is the validation error returned by
// SIPTrunkInfo.Validate if the designated constraints aren't met.
type SIPTrunkInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SIPTrunkInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SIPTrunkInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SIPTrunkInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SIPTrunkInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SIPTrunkInfoValidationError) ErrorName() string { return "SIPTrunkInfoValidationError" }

// Error satisfies the builtin error interface
func (e SIPTrunkInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSIPTrunkInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SIPTrunkInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SIPTrunkInfoValidationError{}

// Validate checks the field values on CreateSIPInboundTrunkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSIPInboundTrunkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSIPInboundTrunkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSIPInboundTrunkRequestMultiError, or nil if none found.
func (m *CreateSIPInboundTrunkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSIPInboundTrunkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTrunk()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSIPInboundTrunkRequestValidationError{
					field:  "Trunk",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSIPInboundTrunkRequestValidationError{
					field:  "Trunk",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTrunk()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSIPInboundTrunkRequestValidationError{
				field:  "Trunk",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSIPInboundTrunkRequestMultiError(errors)
	}

	return nil
}

// CreateSIPInboundTrunkRequestMultiError is an error wrapping multiple
// validation errors returned by CreateSIPInboundTrunkRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateSIPInboundTrunkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSIPInboundTrunkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSIPInboundTrunkRequestMultiError) AllErrors() []error { return m }

// CreateSIPInboundTrunkRequestValidationError is the validation error returned
// by CreateSIPInboundTrunkRequest.Validate if the designated constraints
// aren't met.
type CreateSIPInboundTrunkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSIPInboundTrunkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSIPInboundTrunkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSIPInboundTrunkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSIPInboundTrunkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSIPInboundTrunkRequestValidationError) ErrorName() string {
	return "CreateSIPInboundTrunkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSIPInboundTrunkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSIPInboundTrunkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSIPInboundTrunkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSIPInboundTrunkRequestValidationError{}

// Validate checks the field values on SIPInboundTrunkInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SIPInboundTrunkInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SIPInboundTrunkInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SIPInboundTrunkInfoMultiError, or nil if none found.
func (m *SIPInboundTrunkInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SIPInboundTrunkInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SipTrunkId

	// no validation rules for Name

	// no validation rules for Metadata

	// no validation rules for AuthUsername

	// no validation rules for AuthPassword

	if len(errors) > 0 {
		return SIPInboundTrunkInfoMultiError(errors)
	}

	return nil
}

// SIPInboundTrunkInfoMultiError is an error wrapping multiple validation
// errors returned by SIPInboundTrunkInfo.ValidateAll() if the designated
// constraints aren't met.
type SIPInboundTrunkInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SIPInboundTrunkInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SIPInboundTrunkInfoMultiError) AllErrors() []error { return m }

// SIPInboundTrunkInfoValidationError is the validation error returned by
// SIPInboundTrunkInfo.Validate if the designated constraints aren't met.
type SIPInboundTrunkInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SIPInboundTrunkInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SIPInboundTrunkInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SIPInboundTrunkInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SIPInboundTrunkInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SIPInboundTrunkInfoValidationError) ErrorName() string {
	return "SIPInboundTrunkInfoValidationError"
}

// Error satisfies the builtin error interface
func (e SIPInboundTrunkInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSIPInboundTrunkInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SIPInboundTrunkInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SIPInboundTrunkInfoValidationError{}

// Validate checks the field values on CreateSIPOutboundTrunkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSIPOutboundTrunkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSIPOutboundTrunkRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateSIPOutboundTrunkRequestMultiError, or nil if none found.
func (m *CreateSIPOutboundTrunkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSIPOutboundTrunkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTrunk()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSIPOutboundTrunkRequestValidationError{
					field:  "Trunk",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSIPOutboundTrunkRequestValidationError{
					field:  "Trunk",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTrunk()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSIPOutboundTrunkRequestValidationError{
				field:  "Trunk",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSIPOutboundTrunkRequestMultiError(errors)
	}

	return nil
}

// CreateSIPOutboundTrunkRequestMultiError is an error wrapping multiple
// validation errors returned by CreateSIPOutboundTrunkRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateSIPOutboundTrunkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSIPOutboundTrunkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSIPOutboundTrunkRequestMultiError) AllErrors() []error { return m }

// CreateSIPOutboundTrunkRequestValidationError is the validation error
// returned by CreateSIPOutboundTrunkRequest.Validate if the designated
// constraints aren't met.
type CreateSIPOutboundTrunkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSIPOutboundTrunkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSIPOutboundTrunkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSIPOutboundTrunkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSIPOutboundTrunkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSIPOutboundTrunkRequestValidationError) ErrorName() string {
	return "CreateSIPOutboundTrunkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSIPOutboundTrunkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSIPOutboundTrunkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSIPOutboundTrunkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSIPOutboundTrunkRequestValidationError{}

// Validate checks the field values on SIPOutboundTrunkInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SIPOutboundTrunkInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SIPOutboundTrunkInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SIPOutboundTrunkInfoMultiError, or nil if none found.
func (m *SIPOutboundTrunkInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SIPOutboundTrunkInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SipTrunkId

	// no validation rules for Name

	// no validation rules for Metadata

	// no validation rules for Address

	// no validation rules for Transport

	// no validation rules for AuthUsername

	// no validation rules for AuthPassword

	if len(errors) > 0 {
		return SIPOutboundTrunkInfoMultiError(errors)
	}

	return nil
}

// SIPOutboundTrunkInfoMultiError is an error wrapping multiple validation
// errors returned by SIPOutboundTrunkInfo.ValidateAll() if the designated
// constraints aren't met.
type SIPOutboundTrunkInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SIPOutboundTrunkInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SIPOutboundTrunkInfoMultiError) AllErrors() []error { return m }

// SIPOutboundTrunkInfoValidationError is the validation error returned by
// SIPOutboundTrunkInfo.Validate if the designated constraints aren't met.
type SIPOutboundTrunkInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SIPOutboundTrunkInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SIPOutboundTrunkInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SIPOutboundTrunkInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SIPOutboundTrunkInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SIPOutboundTrunkInfoValidationError) ErrorName() string {
	return "SIPOutboundTrunkInfoValidationError"
}

// Error satisfies the builtin error interface
func (e SIPOutboundTrunkInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSIPOutboundTrunkInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SIPOutboundTrunkInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SIPOutboundTrunkInfoValidationError{}

// Validate checks the field values on ListSIPTrunkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSIPTrunkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSIPTrunkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSIPTrunkRequestMultiError, or nil if none found.
func (m *ListSIPTrunkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSIPTrunkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListSIPTrunkRequestMultiError(errors)
	}

	return nil
}

// ListSIPTrunkRequestMultiError is an error wrapping multiple validation
// errors returned by ListSIPTrunkRequest.ValidateAll() if the designated
// constraints aren't met.
type ListSIPTrunkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSIPTrunkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSIPTrunkRequestMultiError) AllErrors() []error { return m }

// ListSIPTrunkRequestValidationError is the validation error returned by
// ListSIPTrunkRequest.Validate if the designated constraints aren't met.
type ListSIPTrunkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSIPTrunkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSIPTrunkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSIPTrunkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSIPTrunkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSIPTrunkRequestValidationError) ErrorName() string {
	return "ListSIPTrunkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSIPTrunkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSIPTrunkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSIPTrunkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSIPTrunkRequestValidationError{}

// Validate checks the field values on ListSIPTrunkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSIPTrunkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSIPTrunkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSIPTrunkResponseMultiError, or nil if none found.
func (m *ListSIPTrunkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSIPTrunkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSIPTrunkResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSIPTrunkResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSIPTrunkResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSIPTrunkResponseMultiError(errors)
	}

	return nil
}

// ListSIPTrunkResponseMultiError is an error wrapping multiple validation
// errors returned by ListSIPTrunkResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSIPTrunkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSIPTrunkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSIPTrunkResponseMultiError) AllErrors() []error { return m }

// ListSIPTrunkResponseValidationError is the validation error returned by
// ListSIPTrunkResponse.Validate if the designated constraints aren't met.
type ListSIPTrunkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSIPTrunkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSIPTrunkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSIPTrunkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSIPTrunkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSIPTrunkResponseValidationError) ErrorName() string {
	return "ListSIPTrunkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSIPTrunkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSIPTrunkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSIPTrunkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSIPTrunkResponseValidationError{}

// Validate checks the field values on ListSIPInboundTrunkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSIPInboundTrunkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSIPInboundTrunkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSIPInboundTrunkRequestMultiError, or nil if none found.
func (m *ListSIPInboundTrunkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSIPInboundTrunkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListSIPInboundTrunkRequestMultiError(errors)
	}

	return nil
}

// ListSIPInboundTrunkRequestMultiError is an error wrapping multiple
// validation errors returned by ListSIPInboundTrunkRequest.ValidateAll() if
// the designated constraints aren't met.
type ListSIPInboundTrunkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSIPInboundTrunkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSIPInboundTrunkRequestMultiError) AllErrors() []error { return m }

// ListSIPInboundTrunkRequestValidationError is the validation error returned
// by ListSIPInboundTrunkRequest.Validate if the designated constraints aren't met.
type ListSIPInboundTrunkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSIPInboundTrunkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSIPInboundTrunkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSIPInboundTrunkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSIPInboundTrunkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSIPInboundTrunkRequestValidationError) ErrorName() string {
	return "ListSIPInboundTrunkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSIPInboundTrunkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSIPInboundTrunkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSIPInboundTrunkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSIPInboundTrunkRequestValidationError{}

// Validate checks the field values on ListSIPInboundTrunkResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSIPInboundTrunkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSIPInboundTrunkResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSIPInboundTrunkResponseMultiError, or nil if none found.
func (m *ListSIPInboundTrunkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSIPInboundTrunkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSIPInboundTrunkResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSIPInboundTrunkResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSIPInboundTrunkResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSIPInboundTrunkResponseMultiError(errors)
	}

	return nil
}

// ListSIPInboundTrunkResponseMultiError is an error wrapping multiple
// validation errors returned by ListSIPInboundTrunkResponse.ValidateAll() if
// the designated constraints aren't met.
type ListSIPInboundTrunkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSIPInboundTrunkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSIPInboundTrunkResponseMultiError) AllErrors() []error { return m }

// ListSIPInboundTrunkResponseValidationError is the validation error returned
// by ListSIPInboundTrunkResponse.Validate if the designated constraints
// aren't met.
type ListSIPInboundTrunkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSIPInboundTrunkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSIPInboundTrunkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSIPInboundTrunkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSIPInboundTrunkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSIPInboundTrunkResponseValidationError) ErrorName() string {
	return "ListSIPInboundTrunkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSIPInboundTrunkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSIPInboundTrunkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSIPInboundTrunkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSIPInboundTrunkResponseValidationError{}

// Validate checks the field values on ListSIPOutboundTrunkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSIPOutboundTrunkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSIPOutboundTrunkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSIPOutboundTrunkRequestMultiError, or nil if none found.
func (m *ListSIPOutboundTrunkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSIPOutboundTrunkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListSIPOutboundTrunkRequestMultiError(errors)
	}

	return nil
}

// ListSIPOutboundTrunkRequestMultiError is an error wrapping multiple
// validation errors returned by ListSIPOutboundTrunkRequest.ValidateAll() if
// the designated constraints aren't met.
type ListSIPOutboundTrunkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSIPOutboundTrunkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSIPOutboundTrunkRequestMultiError) AllErrors() []error { return m }

// ListSIPOutboundTrunkRequestValidationError is the validation error returned
// by ListSIPOutboundTrunkRequest.Validate if the designated constraints
// aren't met.
type ListSIPOutboundTrunkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSIPOutboundTrunkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSIPOutboundTrunkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSIPOutboundTrunkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSIPOutboundTrunkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSIPOutboundTrunkRequestValidationError) ErrorName() string {
	return "ListSIPOutboundTrunkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSIPOutboundTrunkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSIPOutboundTrunkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSIPOutboundTrunkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSIPOutboundTrunkRequestValidationError{}

// Validate checks the field values on ListSIPOutboundTrunkResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSIPOutboundTrunkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSIPOutboundTrunkResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSIPOutboundTrunkResponseMultiError, or nil if none found.
func (m *ListSIPOutboundTrunkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSIPOutboundTrunkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSIPOutboundTrunkResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSIPOutboundTrunkResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSIPOutboundTrunkResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSIPOutboundTrunkResponseMultiError(errors)
	}

	return nil
}

// ListSIPOutboundTrunkResponseMultiError is an error wrapping multiple
// validation errors returned by ListSIPOutboundTrunkResponse.ValidateAll() if
// the designated constraints aren't met.
type ListSIPOutboundTrunkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSIPOutboundTrunkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSIPOutboundTrunkResponseMultiError) AllErrors() []error { return m }

// ListSIPOutboundTrunkResponseValidationError is the validation error returned
// by ListSIPOutboundTrunkResponse.Validate if the designated constraints
// aren't met.
type ListSIPOutboundTrunkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSIPOutboundTrunkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSIPOutboundTrunkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSIPOutboundTrunkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSIPOutboundTrunkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSIPOutboundTrunkResponseValidationError) ErrorName() string {
	return "ListSIPOutboundTrunkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSIPOutboundTrunkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSIPOutboundTrunkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSIPOutboundTrunkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSIPOutboundTrunkResponseValidationError{}

// Validate checks the field values on DeleteSIPTrunkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSIPTrunkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSIPTrunkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSIPTrunkRequestMultiError, or nil if none found.
func (m *DeleteSIPTrunkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSIPTrunkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SipTrunkId

	if len(errors) > 0 {
		return DeleteSIPTrunkRequestMultiError(errors)
	}

	return nil
}

// DeleteSIPTrunkRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteSIPTrunkRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteSIPTrunkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSIPTrunkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSIPTrunkRequestMultiError) AllErrors() []error { return m }

// DeleteSIPTrunkRequestValidationError is the validation error returned by
// DeleteSIPTrunkRequest.Validate if the designated constraints aren't met.
type DeleteSIPTrunkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSIPTrunkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSIPTrunkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSIPTrunkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSIPTrunkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSIPTrunkRequestValidationError) ErrorName() string {
	return "DeleteSIPTrunkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSIPTrunkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSIPTrunkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSIPTrunkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSIPTrunkRequestValidationError{}

// Validate checks the field values on SIPDispatchRuleDirect with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SIPDispatchRuleDirect) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SIPDispatchRuleDirect with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SIPDispatchRuleDirectMultiError, or nil if none found.
func (m *SIPDispatchRuleDirect) ValidateAll() error {
	return m.validate(true)
}

func (m *SIPDispatchRuleDirect) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomName

	// no validation rules for Pin

	if len(errors) > 0 {
		return SIPDispatchRuleDirectMultiError(errors)
	}

	return nil
}

// SIPDispatchRuleDirectMultiError is an error wrapping multiple validation
// errors returned by SIPDispatchRuleDirect.ValidateAll() if the designated
// constraints aren't met.
type SIPDispatchRuleDirectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SIPDispatchRuleDirectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SIPDispatchRuleDirectMultiError) AllErrors() []error { return m }

// SIPDispatchRuleDirectValidationError is the validation error returned by
// SIPDispatchRuleDirect.Validate if the designated constraints aren't met.
type SIPDispatchRuleDirectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SIPDispatchRuleDirectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SIPDispatchRuleDirectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SIPDispatchRuleDirectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SIPDispatchRuleDirectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SIPDispatchRuleDirectValidationError) ErrorName() string {
	return "SIPDispatchRuleDirectValidationError"
}

// Error satisfies the builtin error interface
func (e SIPDispatchRuleDirectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSIPDispatchRuleDirect.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SIPDispatchRuleDirectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SIPDispatchRuleDirectValidationError{}

// Validate checks the field values on SIPDispatchRuleIndividual with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SIPDispatchRuleIndividual) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SIPDispatchRuleIndividual with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SIPDispatchRuleIndividualMultiError, or nil if none found.
func (m *SIPDispatchRuleIndividual) ValidateAll() error {
	return m.validate(true)
}

func (m *SIPDispatchRuleIndividual) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomPrefix

	// no validation rules for Pin

	if len(errors) > 0 {
		return SIPDispatchRuleIndividualMultiError(errors)
	}

	return nil
}

// SIPDispatchRuleIndividualMultiError is an error wrapping multiple validation
// errors returned by SIPDispatchRuleIndividual.ValidateAll() if the
// designated constraints aren't met.
type SIPDispatchRuleIndividualMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SIPDispatchRuleIndividualMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SIPDispatchRuleIndividualMultiError) AllErrors() []error { return m }

// SIPDispatchRuleIndividualValidationError is the validation error returned by
// SIPDispatchRuleIndividual.Validate if the designated constraints aren't met.
type SIPDispatchRuleIndividualValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SIPDispatchRuleIndividualValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SIPDispatchRuleIndividualValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SIPDispatchRuleIndividualValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SIPDispatchRuleIndividualValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SIPDispatchRuleIndividualValidationError) ErrorName() string {
	return "SIPDispatchRuleIndividualValidationError"
}

// Error satisfies the builtin error interface
func (e SIPDispatchRuleIndividualValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSIPDispatchRuleIndividual.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SIPDispatchRuleIndividualValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SIPDispatchRuleIndividualValidationError{}

// Validate checks the field values on SIPDispatchRule with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SIPDispatchRule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SIPDispatchRule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SIPDispatchRuleMultiError, or nil if none found.
func (m *SIPDispatchRule) ValidateAll() error {
	return m.validate(true)
}

func (m *SIPDispatchRule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Rule.(type) {
	case *SIPDispatchRule_DispatchRuleDirect:
		if v == nil {
			err := SIPDispatchRuleValidationError{
				field:  "Rule",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDispatchRuleDirect()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SIPDispatchRuleValidationError{
						field:  "DispatchRuleDirect",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SIPDispatchRuleValidationError{
						field:  "DispatchRuleDirect",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDispatchRuleDirect()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SIPDispatchRuleValidationError{
					field:  "DispatchRuleDirect",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SIPDispatchRule_DispatchRuleIndividual:
		if v == nil {
			err := SIPDispatchRuleValidationError{
				field:  "Rule",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDispatchRuleIndividual()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SIPDispatchRuleValidationError{
						field:  "DispatchRuleIndividual",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SIPDispatchRuleValidationError{
						field:  "DispatchRuleIndividual",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDispatchRuleIndividual()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SIPDispatchRuleValidationError{
					field:  "DispatchRuleIndividual",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return SIPDispatchRuleMultiError(errors)
	}

	return nil
}

// SIPDispatchRuleMultiError is an error wrapping multiple validation errors
// returned by SIPDispatchRule.ValidateAll() if the designated constraints
// aren't met.
type SIPDispatchRuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SIPDispatchRuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SIPDispatchRuleMultiError) AllErrors() []error { return m }

// SIPDispatchRuleValidationError is the validation error returned by
// SIPDispatchRule.Validate if the designated constraints aren't met.
type SIPDispatchRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SIPDispatchRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SIPDispatchRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SIPDispatchRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SIPDispatchRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SIPDispatchRuleValidationError) ErrorName() string { return "SIPDispatchRuleValidationError" }

// Error satisfies the builtin error interface
func (e SIPDispatchRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSIPDispatchRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SIPDispatchRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SIPDispatchRuleValidationError{}

// Validate checks the field values on CreateSIPDispatchRuleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSIPDispatchRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSIPDispatchRuleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSIPDispatchRuleRequestMultiError, or nil if none found.
func (m *CreateSIPDispatchRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSIPDispatchRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSIPDispatchRuleRequestValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSIPDispatchRuleRequestValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSIPDispatchRuleRequestValidationError{
				field:  "Rule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for HidePhoneNumber

	// no validation rules for Name

	// no validation rules for Metadata

	// no validation rules for Attributes

	if len(errors) > 0 {
		return CreateSIPDispatchRuleRequestMultiError(errors)
	}

	return nil
}

// CreateSIPDispatchRuleRequestMultiError is an error wrapping multiple
// validation errors returned by CreateSIPDispatchRuleRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateSIPDispatchRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSIPDispatchRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSIPDispatchRuleRequestMultiError) AllErrors() []error { return m }

// CreateSIPDispatchRuleRequestValidationError is the validation error returned
// by CreateSIPDispatchRuleRequest.Validate if the designated constraints
// aren't met.
type CreateSIPDispatchRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSIPDispatchRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSIPDispatchRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSIPDispatchRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSIPDispatchRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSIPDispatchRuleRequestValidationError) ErrorName() string {
	return "CreateSIPDispatchRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSIPDispatchRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSIPDispatchRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSIPDispatchRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSIPDispatchRuleRequestValidationError{}

// Validate checks the field values on SIPDispatchRuleInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SIPDispatchRuleInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SIPDispatchRuleInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SIPDispatchRuleInfoMultiError, or nil if none found.
func (m *SIPDispatchRuleInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SIPDispatchRuleInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SipDispatchRuleId

	if all {
		switch v := interface{}(m.GetRule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SIPDispatchRuleInfoValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SIPDispatchRuleInfoValidationError{
					field:  "Rule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SIPDispatchRuleInfoValidationError{
				field:  "Rule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for HidePhoneNumber

	// no validation rules for Name

	// no validation rules for Metadata

	// no validation rules for Attributes

	if len(errors) > 0 {
		return SIPDispatchRuleInfoMultiError(errors)
	}

	return nil
}

// SIPDispatchRuleInfoMultiError is an error wrapping multiple validation
// errors returned by SIPDispatchRuleInfo.ValidateAll() if the designated
// constraints aren't met.
type SIPDispatchRuleInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SIPDispatchRuleInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SIPDispatchRuleInfoMultiError) AllErrors() []error { return m }

// SIPDispatchRuleInfoValidationError is the validation error returned by
// SIPDispatchRuleInfo.Validate if the designated constraints aren't met.
type SIPDispatchRuleInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SIPDispatchRuleInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SIPDispatchRuleInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SIPDispatchRuleInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SIPDispatchRuleInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SIPDispatchRuleInfoValidationError) ErrorName() string {
	return "SIPDispatchRuleInfoValidationError"
}

// Error satisfies the builtin error interface
func (e SIPDispatchRuleInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSIPDispatchRuleInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SIPDispatchRuleInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SIPDispatchRuleInfoValidationError{}

// Validate checks the field values on ListSIPDispatchRuleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSIPDispatchRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSIPDispatchRuleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSIPDispatchRuleRequestMultiError, or nil if none found.
func (m *ListSIPDispatchRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSIPDispatchRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListSIPDispatchRuleRequestMultiError(errors)
	}

	return nil
}

// ListSIPDispatchRuleRequestMultiError is an error wrapping multiple
// validation errors returned by ListSIPDispatchRuleRequest.ValidateAll() if
// the designated constraints aren't met.
type ListSIPDispatchRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSIPDispatchRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSIPDispatchRuleRequestMultiError) AllErrors() []error { return m }

// ListSIPDispatchRuleRequestValidationError is the validation error returned
// by ListSIPDispatchRuleRequest.Validate if the designated constraints aren't met.
type ListSIPDispatchRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSIPDispatchRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSIPDispatchRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSIPDispatchRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSIPDispatchRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSIPDispatchRuleRequestValidationError) ErrorName() string {
	return "ListSIPDispatchRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSIPDispatchRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSIPDispatchRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSIPDispatchRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSIPDispatchRuleRequestValidationError{}

// Validate checks the field values on ListSIPDispatchRuleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSIPDispatchRuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSIPDispatchRuleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSIPDispatchRuleResponseMultiError, or nil if none found.
func (m *ListSIPDispatchRuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSIPDispatchRuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSIPDispatchRuleResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSIPDispatchRuleResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSIPDispatchRuleResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSIPDispatchRuleResponseMultiError(errors)
	}

	return nil
}

// ListSIPDispatchRuleResponseMultiError is an error wrapping multiple
// validation errors returned by ListSIPDispatchRuleResponse.ValidateAll() if
// the designated constraints aren't met.
type ListSIPDispatchRuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSIPDispatchRuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSIPDispatchRuleResponseMultiError) AllErrors() []error { return m }

// ListSIPDispatchRuleResponseValidationError is the validation error returned
// by ListSIPDispatchRuleResponse.Validate if the designated constraints
// aren't met.
type ListSIPDispatchRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSIPDispatchRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSIPDispatchRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSIPDispatchRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSIPDispatchRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSIPDispatchRuleResponseValidationError) ErrorName() string {
	return "ListSIPDispatchRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSIPDispatchRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSIPDispatchRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSIPDispatchRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSIPDispatchRuleResponseValidationError{}

// Validate checks the field values on DeleteSIPDispatchRuleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSIPDispatchRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSIPDispatchRuleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSIPDispatchRuleRequestMultiError, or nil if none found.
func (m *DeleteSIPDispatchRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSIPDispatchRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SipDispatchRuleId

	if len(errors) > 0 {
		return DeleteSIPDispatchRuleRequestMultiError(errors)
	}

	return nil
}

// DeleteSIPDispatchRuleRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteSIPDispatchRuleRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteSIPDispatchRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSIPDispatchRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSIPDispatchRuleRequestMultiError) AllErrors() []error { return m }

// DeleteSIPDispatchRuleRequestValidationError is the validation error returned
// by DeleteSIPDispatchRuleRequest.Validate if the designated constraints
// aren't met.
type DeleteSIPDispatchRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSIPDispatchRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSIPDispatchRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSIPDispatchRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSIPDispatchRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSIPDispatchRuleRequestValidationError) ErrorName() string {
	return "DeleteSIPDispatchRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSIPDispatchRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSIPDispatchRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSIPDispatchRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSIPDispatchRuleRequestValidationError{}

// Validate checks the field values on CreateSIPParticipantRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSIPParticipantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSIPParticipantRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSIPParticipantRequestMultiError, or nil if none found.
func (m *CreateSIPParticipantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSIPParticipantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SipTrunkId

	// no validation rules for SipCallTo

	// no validation rules for RoomName

	// no validation rules for ParticipantIdentity

	// no validation rules for ParticipantName

	// no validation rules for ParticipantMetadata

	// no validation rules for ParticipantAttributes

	// no validation rules for Dtmf

	// no validation rules for PlayRingtone

	// no validation rules for HidePhoneNumber

	if len(errors) > 0 {
		return CreateSIPParticipantRequestMultiError(errors)
	}

	return nil
}

// CreateSIPParticipantRequestMultiError is an error wrapping multiple
// validation errors returned by CreateSIPParticipantRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateSIPParticipantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSIPParticipantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSIPParticipantRequestMultiError) AllErrors() []error { return m }

// CreateSIPParticipantRequestValidationError is the validation error returned
// by CreateSIPParticipantRequest.Validate if the designated constraints
// aren't met.
type CreateSIPParticipantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSIPParticipantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSIPParticipantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSIPParticipantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSIPParticipantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSIPParticipantRequestValidationError) ErrorName() string {
	return "CreateSIPParticipantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSIPParticipantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSIPParticipantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSIPParticipantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSIPParticipantRequestValidationError{}

// Validate checks the field values on SIPParticipantInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SIPParticipantInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SIPParticipantInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SIPParticipantInfoMultiError, or nil if none found.
func (m *SIPParticipantInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SIPParticipantInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ParticipantId

	// no validation rules for ParticipantIdentity

	// no validation rules for RoomName

	// no validation rules for SipCallId

	if len(errors) > 0 {
		return SIPParticipantInfoMultiError(errors)
	}

	return nil
}

// SIPParticipantInfoMultiError is an error wrapping multiple validation errors
// returned by SIPParticipantInfo.ValidateAll() if the designated constraints
// aren't met.
type SIPParticipantInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SIPParticipantInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SIPParticipantInfoMultiError) AllErrors() []error { return m }

// SIPParticipantInfoValidationError is the validation error returned by
// SIPParticipantInfo.Validate if the designated constraints aren't met.
type SIPParticipantInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SIPParticipantInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SIPParticipantInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SIPParticipantInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SIPParticipantInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SIPParticipantInfoValidationError) ErrorName() string {
	return "SIPParticipantInfoValidationError"
}

// Error satisfies the builtin error interface
func (e SIPParticipantInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSIPParticipantInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SIPParticipantInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SIPParticipantInfoValidationError{}
