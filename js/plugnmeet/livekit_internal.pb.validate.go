// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: livekit_internal.proto

package livekit

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Node with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Node) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Node with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NodeMultiError, or nil if none found.
func (m *Node) ValidateAll() error {
	return m.validate(true)
}

func (m *Node) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Ip

	// no validation rules for NumCpus

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NodeValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NodeValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	// no validation rules for State

	// no validation rules for Region

	if len(errors) > 0 {
		return NodeMultiError(errors)
	}

	return nil
}

// NodeMultiError is an error wrapping multiple validation errors returned by
// Node.ValidateAll() if the designated constraints aren't met.
type NodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeMultiError) AllErrors() []error { return m }

// NodeValidationError is the validation error returned by Node.Validate if the
// designated constraints aren't met.
type NodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeValidationError) ErrorName() string { return "NodeValidationError" }

// Error satisfies the builtin error interface
func (e NodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeValidationError{}

// Validate checks the field values on NodeStats with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NodeStats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeStats with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NodeStatsMultiError, or nil
// if none found.
func (m *NodeStats) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeStats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartedAt

	// no validation rules for UpdatedAt

	// no validation rules for NumRooms

	// no validation rules for NumClients

	// no validation rules for NumTracksIn

	// no validation rules for NumTracksOut

	// no validation rules for NumTrackPublishAttempts

	// no validation rules for TrackPublishAttemptsPerSec

	// no validation rules for NumTrackPublishSuccess

	// no validation rules for TrackPublishSuccessPerSec

	// no validation rules for NumTrackSubscribeAttempts

	// no validation rules for TrackSubscribeAttemptsPerSec

	// no validation rules for NumTrackSubscribeSuccess

	// no validation rules for TrackSubscribeSuccessPerSec

	// no validation rules for BytesIn

	// no validation rules for BytesOut

	// no validation rules for PacketsIn

	// no validation rules for PacketsOut

	// no validation rules for NackTotal

	// no validation rules for BytesInPerSec

	// no validation rules for BytesOutPerSec

	// no validation rules for PacketsInPerSec

	// no validation rules for PacketsOutPerSec

	// no validation rules for NackPerSec

	// no validation rules for NumCpus

	// no validation rules for LoadAvgLast1Min

	// no validation rules for LoadAvgLast5Min

	// no validation rules for LoadAvgLast15Min

	// no validation rules for CpuLoad

	// no validation rules for MemoryLoad

	// no validation rules for MemoryTotal

	// no validation rules for MemoryUsed

	// no validation rules for SysPacketsOut

	// no validation rules for SysPacketsDropped

	// no validation rules for SysPacketsOutPerSec

	// no validation rules for SysPacketsDroppedPerSec

	// no validation rules for SysPacketsDroppedPctPerSec

	// no validation rules for RetransmitBytesOut

	// no validation rules for RetransmitPacketsOut

	// no validation rules for RetransmitBytesOutPerSec

	// no validation rules for RetransmitPacketsOutPerSec

	// no validation rules for ParticipantSignalConnected

	// no validation rules for ParticipantSignalConnectedPerSec

	// no validation rules for ParticipantRtcConnected

	// no validation rules for ParticipantRtcConnectedPerSec

	// no validation rules for ParticipantRtcInit

	// no validation rules for ParticipantRtcInitPerSec

	// no validation rules for ForwardLatency

	// no validation rules for ForwardJitter

	if len(errors) > 0 {
		return NodeStatsMultiError(errors)
	}

	return nil
}

// NodeStatsMultiError is an error wrapping multiple validation errors returned
// by NodeStats.ValidateAll() if the designated constraints aren't met.
type NodeStatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeStatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeStatsMultiError) AllErrors() []error { return m }

// NodeStatsValidationError is the validation error returned by
// NodeStats.Validate if the designated constraints aren't met.
type NodeStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeStatsValidationError) ErrorName() string { return "NodeStatsValidationError" }

// Error satisfies the builtin error interface
func (e NodeStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeStatsValidationError{}

// Validate checks the field values on StartSession with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StartSession) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartSession with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StartSessionMultiError, or
// nil if none found.
func (m *StartSession) ValidateAll() error {
	return m.validate(true)
}

func (m *StartSession) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomName

	// no validation rules for Identity

	// no validation rules for ConnectionId

	// no validation rules for Reconnect

	// no validation rules for AutoSubscribe

	// no validation rules for Hidden

	if all {
		switch v := interface{}(m.GetClient()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartSessionValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartSessionValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClient()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartSessionValidationError{
				field:  "Client",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Recorder

	// no validation rules for Name

	// no validation rules for GrantsJson

	// no validation rules for AdaptiveStream

	// no validation rules for ParticipantId

	// no validation rules for ReconnectReason

	// no validation rules for DisableIceLite

	if all {
		switch v := interface{}(m.GetCreateRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartSessionValidationError{
					field:  "CreateRoom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartSessionValidationError{
					field:  "CreateRoom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartSessionValidationError{
				field:  "CreateRoom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.SubscriberAllowPause != nil {
		// no validation rules for SubscriberAllowPause
	}

	if len(errors) > 0 {
		return StartSessionMultiError(errors)
	}

	return nil
}

// StartSessionMultiError is an error wrapping multiple validation errors
// returned by StartSession.ValidateAll() if the designated constraints aren't met.
type StartSessionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartSessionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartSessionMultiError) AllErrors() []error { return m }

// StartSessionValidationError is the validation error returned by
// StartSession.Validate if the designated constraints aren't met.
type StartSessionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartSessionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartSessionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartSessionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartSessionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartSessionValidationError) ErrorName() string { return "StartSessionValidationError" }

// Error satisfies the builtin error interface
func (e StartSessionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartSession.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartSessionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartSessionValidationError{}

// Validate checks the field values on RoomInternal with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoomInternal) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomInternal with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoomInternalMultiError, or
// nil if none found.
func (m *RoomInternal) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomInternal) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTrackEgress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomInternalValidationError{
					field:  "TrackEgress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomInternalValidationError{
					field:  "TrackEgress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTrackEgress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomInternalValidationError{
				field:  "TrackEgress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetParticipantEgress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomInternalValidationError{
					field:  "ParticipantEgress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomInternalValidationError{
					field:  "ParticipantEgress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParticipantEgress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomInternalValidationError{
				field:  "ParticipantEgress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPlayoutDelay()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoomInternalValidationError{
					field:  "PlayoutDelay",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoomInternalValidationError{
					field:  "PlayoutDelay",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlayoutDelay()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoomInternalValidationError{
				field:  "PlayoutDelay",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAgentDispatches() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoomInternalValidationError{
						field:  fmt.Sprintf("AgentDispatches[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoomInternalValidationError{
						field:  fmt.Sprintf("AgentDispatches[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoomInternalValidationError{
					field:  fmt.Sprintf("AgentDispatches[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SyncStreams

	// no validation rules for ReplayEnabled

	if len(errors) > 0 {
		return RoomInternalMultiError(errors)
	}

	return nil
}

// RoomInternalMultiError is an error wrapping multiple validation errors
// returned by RoomInternal.ValidateAll() if the designated constraints aren't met.
type RoomInternalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomInternalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomInternalMultiError) AllErrors() []error { return m }

// RoomInternalValidationError is the validation error returned by
// RoomInternal.Validate if the designated constraints aren't met.
type RoomInternalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomInternalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomInternalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomInternalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomInternalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomInternalValidationError) ErrorName() string { return "RoomInternalValidationError" }

// Error satisfies the builtin error interface
func (e RoomInternalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomInternal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomInternalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomInternalValidationError{}

// Validate checks the field values on ICEConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ICEConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ICEConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ICEConfigMultiError, or nil
// if none found.
func (m *ICEConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ICEConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PreferenceSubscriber

	// no validation rules for PreferencePublisher

	if len(errors) > 0 {
		return ICEConfigMultiError(errors)
	}

	return nil
}

// ICEConfigMultiError is an error wrapping multiple validation errors returned
// by ICEConfig.ValidateAll() if the designated constraints aren't met.
type ICEConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ICEConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ICEConfigMultiError) AllErrors() []error { return m }

// ICEConfigValidationError is the validation error returned by
// ICEConfig.Validate if the designated constraints aren't met.
type ICEConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ICEConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ICEConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ICEConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ICEConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ICEConfigValidationError) ErrorName() string { return "ICEConfigValidationError" }

// Error satisfies the builtin error interface
func (e ICEConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sICEConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ICEConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ICEConfigValidationError{}
