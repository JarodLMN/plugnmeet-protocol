// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: livekit_metrics.proto

package livekit

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MetricsBatch with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MetricsBatch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricsBatch with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetricsBatchMultiError, or
// nil if none found.
func (m *MetricsBatch) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricsBatch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTimeSeries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MetricsBatchValidationError{
						field:  fmt.Sprintf("TimeSeries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MetricsBatchValidationError{
						field:  fmt.Sprintf("TimeSeries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetricsBatchValidationError{
					field:  fmt.Sprintf("TimeSeries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MetricsBatchValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MetricsBatchValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetricsBatchValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MetricsBatchMultiError(errors)
	}

	return nil
}

// MetricsBatchMultiError is an error wrapping multiple validation errors
// returned by MetricsBatch.ValidateAll() if the designated constraints aren't met.
type MetricsBatchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricsBatchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricsBatchMultiError) AllErrors() []error { return m }

// MetricsBatchValidationError is the validation error returned by
// MetricsBatch.Validate if the designated constraints aren't met.
type MetricsBatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsBatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsBatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsBatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsBatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsBatchValidationError) ErrorName() string { return "MetricsBatchValidationError" }

// Error satisfies the builtin error interface
func (e MetricsBatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricsBatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsBatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsBatchValidationError{}

// Validate checks the field values on TimeSeriesMetric with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TimeSeriesMetric) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeSeriesMetric with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimeSeriesMetricMultiError, or nil if none found.
func (m *TimeSeriesMetric) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeSeriesMetric) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Label

	// no validation rules for ParticipantIdentity

	// no validation rules for TrackSid

	// no validation rules for StartTimestamp

	// no validation rules for EndTimestamp

	for idx, item := range m.GetSamples() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TimeSeriesMetricValidationError{
						field:  fmt.Sprintf("Samples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TimeSeriesMetricValidationError{
						field:  fmt.Sprintf("Samples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TimeSeriesMetricValidationError{
					field:  fmt.Sprintf("Samples[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TimeSeriesMetricMultiError(errors)
	}

	return nil
}

// TimeSeriesMetricMultiError is an error wrapping multiple validation errors
// returned by TimeSeriesMetric.ValidateAll() if the designated constraints
// aren't met.
type TimeSeriesMetricMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeSeriesMetricMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeSeriesMetricMultiError) AllErrors() []error { return m }

// TimeSeriesMetricValidationError is the validation error returned by
// TimeSeriesMetric.Validate if the designated constraints aren't met.
type TimeSeriesMetricValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeSeriesMetricValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeSeriesMetricValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeSeriesMetricValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeSeriesMetricValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeSeriesMetricValidationError) ErrorName() string { return "TimeSeriesMetricValidationError" }

// Error satisfies the builtin error interface
func (e TimeSeriesMetricValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeSeriesMetric.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeSeriesMetricValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeSeriesMetricValidationError{}

// Validate checks the field values on MetricSample with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MetricSample) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricSample with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MetricSampleMultiError, or
// nil if none found.
func (m *MetricSample) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricSample) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timestamp

	// no validation rules for Value

	if len(errors) > 0 {
		return MetricSampleMultiError(errors)
	}

	return nil
}

// MetricSampleMultiError is an error wrapping multiple validation errors
// returned by MetricSample.ValidateAll() if the designated constraints aren't met.
type MetricSampleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricSampleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricSampleMultiError) AllErrors() []error { return m }

// MetricSampleValidationError is the validation error returned by
// MetricSample.Validate if the designated constraints aren't met.
type MetricSampleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricSampleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricSampleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricSampleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricSampleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricSampleValidationError) ErrorName() string { return "MetricSampleValidationError" }

// Error satisfies the builtin error interface
func (e MetricSampleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricSample.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricSampleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricSampleValidationError{}

// Validate checks the field values on EventMetric with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EventMetric) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventMetric with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EventMetricMultiError, or
// nil if none found.
func (m *EventMetric) ValidateAll() error {
	return m.validate(true)
}

func (m *EventMetric) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Label

	// no validation rules for ParticipantIdentity

	// no validation rules for TrackSid

	// no validation rules for StartTimestamp

	// no validation rules for Metadata

	if m.EndTimestamp != nil {
		// no validation rules for EndTimestamp
	}

	if len(errors) > 0 {
		return EventMetricMultiError(errors)
	}

	return nil
}

// EventMetricMultiError is an error wrapping multiple validation errors
// returned by EventMetric.ValidateAll() if the designated constraints aren't met.
type EventMetricMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventMetricMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventMetricMultiError) AllErrors() []error { return m }

// EventMetricValidationError is the validation error returned by
// EventMetric.Validate if the designated constraints aren't met.
type EventMetricValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventMetricValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventMetricValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventMetricValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventMetricValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventMetricValidationError) ErrorName() string { return "EventMetricValidationError" }

// Error satisfies the builtin error interface
func (e EventMetricValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventMetric.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventMetricValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventMetricValidationError{}
