// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: livekit_analytics.proto

package livekit

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AnalyticsVideoLayer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AnalyticsVideoLayer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AnalyticsVideoLayer with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AnalyticsVideoLayerMultiError, or nil if none found.
func (m *AnalyticsVideoLayer) ValidateAll() error {
	return m.validate(true)
}

func (m *AnalyticsVideoLayer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Layer

	// no validation rules for Packets

	// no validation rules for Bytes

	// no validation rules for Frames

	if len(errors) > 0 {
		return AnalyticsVideoLayerMultiError(errors)
	}

	return nil
}

// AnalyticsVideoLayerMultiError is an error wrapping multiple validation
// errors returned by AnalyticsVideoLayer.ValidateAll() if the designated
// constraints aren't met.
type AnalyticsVideoLayerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnalyticsVideoLayerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnalyticsVideoLayerMultiError) AllErrors() []error { return m }

// AnalyticsVideoLayerValidationError is the validation error returned by
// AnalyticsVideoLayer.Validate if the designated constraints aren't met.
type AnalyticsVideoLayerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnalyticsVideoLayerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnalyticsVideoLayerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnalyticsVideoLayerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnalyticsVideoLayerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnalyticsVideoLayerValidationError) ErrorName() string {
	return "AnalyticsVideoLayerValidationError"
}

// Error satisfies the builtin error interface
func (e AnalyticsVideoLayerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnalyticsVideoLayer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnalyticsVideoLayerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnalyticsVideoLayerValidationError{}

// Validate checks the field values on AnalyticsStream with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AnalyticsStream) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AnalyticsStream with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AnalyticsStreamMultiError, or nil if none found.
func (m *AnalyticsStream) ValidateAll() error {
	return m.validate(true)
}

func (m *AnalyticsStream) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ssrc

	// no validation rules for PrimaryPackets

	// no validation rules for PrimaryBytes

	// no validation rules for RetransmitPackets

	// no validation rules for RetransmitBytes

	// no validation rules for PaddingPackets

	// no validation rules for PaddingBytes

	// no validation rules for PacketsLost

	// no validation rules for Frames

	// no validation rules for Rtt

	// no validation rules for Jitter

	// no validation rules for Nacks

	// no validation rules for Plis

	// no validation rules for Firs

	for idx, item := range m.GetVideoLayers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AnalyticsStreamValidationError{
						field:  fmt.Sprintf("VideoLayers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AnalyticsStreamValidationError{
						field:  fmt.Sprintf("VideoLayers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AnalyticsStreamValidationError{
					field:  fmt.Sprintf("VideoLayers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AnalyticsStreamValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AnalyticsStreamValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AnalyticsStreamValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AnalyticsStreamValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AnalyticsStreamValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AnalyticsStreamValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AnalyticsStreamMultiError(errors)
	}

	return nil
}

// AnalyticsStreamMultiError is an error wrapping multiple validation errors
// returned by AnalyticsStream.ValidateAll() if the designated constraints
// aren't met.
type AnalyticsStreamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnalyticsStreamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnalyticsStreamMultiError) AllErrors() []error { return m }

// AnalyticsStreamValidationError is the validation error returned by
// AnalyticsStream.Validate if the designated constraints aren't met.
type AnalyticsStreamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnalyticsStreamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnalyticsStreamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnalyticsStreamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnalyticsStreamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnalyticsStreamValidationError) ErrorName() string { return "AnalyticsStreamValidationError" }

// Error satisfies the builtin error interface
func (e AnalyticsStreamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnalyticsStream.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnalyticsStreamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnalyticsStreamValidationError{}

// Validate checks the field values on AnalyticsStat with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AnalyticsStat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AnalyticsStat with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AnalyticsStatMultiError, or
// nil if none found.
func (m *AnalyticsStat) ValidateAll() error {
	return m.validate(true)
}

func (m *AnalyticsStat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AnalyticsKey

	// no validation rules for Kind

	if all {
		switch v := interface{}(m.GetTimeStamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AnalyticsStatValidationError{
					field:  "TimeStamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AnalyticsStatValidationError{
					field:  "TimeStamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeStamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AnalyticsStatValidationError{
				field:  "TimeStamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Node

	// no validation rules for RoomId

	// no validation rules for RoomName

	// no validation rules for ParticipantId

	// no validation rules for TrackId

	// no validation rules for Score

	for idx, item := range m.GetStreams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AnalyticsStatValidationError{
						field:  fmt.Sprintf("Streams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AnalyticsStatValidationError{
						field:  fmt.Sprintf("Streams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AnalyticsStatValidationError{
					field:  fmt.Sprintf("Streams[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Mime

	// no validation rules for MinScore

	// no validation rules for MedianScore

	if len(errors) > 0 {
		return AnalyticsStatMultiError(errors)
	}

	return nil
}

// AnalyticsStatMultiError is an error wrapping multiple validation errors
// returned by AnalyticsStat.ValidateAll() if the designated constraints
// aren't met.
type AnalyticsStatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnalyticsStatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnalyticsStatMultiError) AllErrors() []error { return m }

// AnalyticsStatValidationError is the validation error returned by
// AnalyticsStat.Validate if the designated constraints aren't met.
type AnalyticsStatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnalyticsStatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnalyticsStatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnalyticsStatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnalyticsStatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnalyticsStatValidationError) ErrorName() string { return "AnalyticsStatValidationError" }

// Error satisfies the builtin error interface
func (e AnalyticsStatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnalyticsStat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnalyticsStatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnalyticsStatValidationError{}

// Validate checks the field values on AnalyticsStats with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AnalyticsStats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AnalyticsStats with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AnalyticsStatsMultiError,
// or nil if none found.
func (m *AnalyticsStats) ValidateAll() error {
	return m.validate(true)
}

func (m *AnalyticsStats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStats() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AnalyticsStatsValidationError{
						field:  fmt.Sprintf("Stats[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AnalyticsStatsValidationError{
						field:  fmt.Sprintf("Stats[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AnalyticsStatsValidationError{
					field:  fmt.Sprintf("Stats[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AnalyticsStatsMultiError(errors)
	}

	return nil
}

// AnalyticsStatsMultiError is an error wrapping multiple validation errors
// returned by AnalyticsStats.ValidateAll() if the designated constraints
// aren't met.
type AnalyticsStatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnalyticsStatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnalyticsStatsMultiError) AllErrors() []error { return m }

// AnalyticsStatsValidationError is the validation error returned by
// AnalyticsStats.Validate if the designated constraints aren't met.
type AnalyticsStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnalyticsStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnalyticsStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnalyticsStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnalyticsStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnalyticsStatsValidationError) ErrorName() string { return "AnalyticsStatsValidationError" }

// Error satisfies the builtin error interface
func (e AnalyticsStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnalyticsStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnalyticsStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnalyticsStatsValidationError{}

// Validate checks the field values on AnalyticsClientMeta with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AnalyticsClientMeta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AnalyticsClientMeta with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AnalyticsClientMetaMultiError, or nil if none found.
func (m *AnalyticsClientMeta) ValidateAll() error {
	return m.validate(true)
}

func (m *AnalyticsClientMeta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Region

	// no validation rules for Node

	// no validation rules for ClientAddr

	// no validation rules for ClientConnectTime

	// no validation rules for ConnectionType

	// no validation rules for ReconnectReason

	if m.GeoHash != nil {
		// no validation rules for GeoHash
	}

	if m.Country != nil {
		// no validation rules for Country
	}

	if m.IspAsn != nil {
		// no validation rules for IspAsn
	}

	if len(errors) > 0 {
		return AnalyticsClientMetaMultiError(errors)
	}

	return nil
}

// AnalyticsClientMetaMultiError is an error wrapping multiple validation
// errors returned by AnalyticsClientMeta.ValidateAll() if the designated
// constraints aren't met.
type AnalyticsClientMetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnalyticsClientMetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnalyticsClientMetaMultiError) AllErrors() []error { return m }

// AnalyticsClientMetaValidationError is the validation error returned by
// AnalyticsClientMeta.Validate if the designated constraints aren't met.
type AnalyticsClientMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnalyticsClientMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnalyticsClientMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnalyticsClientMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnalyticsClientMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnalyticsClientMetaValidationError) ErrorName() string {
	return "AnalyticsClientMetaValidationError"
}

// Error satisfies the builtin error interface
func (e AnalyticsClientMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnalyticsClientMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnalyticsClientMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnalyticsClientMetaValidationError{}

// Validate checks the field values on AnalyticsEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AnalyticsEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AnalyticsEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AnalyticsEventMultiError,
// or nil if none found.
func (m *AnalyticsEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *AnalyticsEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AnalyticsEventValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AnalyticsEventValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AnalyticsEventValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RoomId

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AnalyticsEventValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AnalyticsEventValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AnalyticsEventValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ParticipantId

	if all {
		switch v := interface{}(m.GetParticipant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AnalyticsEventValidationError{
					field:  "Participant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AnalyticsEventValidationError{
					field:  "Participant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParticipant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AnalyticsEventValidationError{
				field:  "Participant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TrackId

	if all {
		switch v := interface{}(m.GetTrack()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AnalyticsEventValidationError{
					field:  "Track",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AnalyticsEventValidationError{
					field:  "Track",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTrack()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AnalyticsEventValidationError{
				field:  "Track",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AnalyticsKey

	if all {
		switch v := interface{}(m.GetClientInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AnalyticsEventValidationError{
					field:  "ClientInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AnalyticsEventValidationError{
					field:  "ClientInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClientInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AnalyticsEventValidationError{
				field:  "ClientInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetClientMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AnalyticsEventValidationError{
					field:  "ClientMeta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AnalyticsEventValidationError{
					field:  "ClientMeta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClientMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AnalyticsEventValidationError{
				field:  "ClientMeta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EgressId

	// no validation rules for IngressId

	// no validation rules for MaxSubscribedVideoQuality

	if all {
		switch v := interface{}(m.GetPublisher()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AnalyticsEventValidationError{
					field:  "Publisher",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AnalyticsEventValidationError{
					field:  "Publisher",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPublisher()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AnalyticsEventValidationError{
				field:  "Publisher",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Mime

	if all {
		switch v := interface{}(m.GetEgress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AnalyticsEventValidationError{
					field:  "Egress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AnalyticsEventValidationError{
					field:  "Egress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEgress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AnalyticsEventValidationError{
				field:  "Egress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIngress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AnalyticsEventValidationError{
					field:  "Ingress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AnalyticsEventValidationError{
					field:  "Ingress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIngress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AnalyticsEventValidationError{
				field:  "Ingress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Error

	if all {
		switch v := interface{}(m.GetRtpStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AnalyticsEventValidationError{
					field:  "RtpStats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AnalyticsEventValidationError{
					field:  "RtpStats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRtpStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AnalyticsEventValidationError{
				field:  "RtpStats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for VideoLayer

	// no validation rules for NodeId

	if len(errors) > 0 {
		return AnalyticsEventMultiError(errors)
	}

	return nil
}

// AnalyticsEventMultiError is an error wrapping multiple validation errors
// returned by AnalyticsEvent.ValidateAll() if the designated constraints
// aren't met.
type AnalyticsEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnalyticsEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnalyticsEventMultiError) AllErrors() []error { return m }

// AnalyticsEventValidationError is the validation error returned by
// AnalyticsEvent.Validate if the designated constraints aren't met.
type AnalyticsEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnalyticsEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnalyticsEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnalyticsEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnalyticsEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnalyticsEventValidationError) ErrorName() string { return "AnalyticsEventValidationError" }

// Error satisfies the builtin error interface
func (e AnalyticsEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnalyticsEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnalyticsEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnalyticsEventValidationError{}

// Validate checks the field values on AnalyticsEvents with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AnalyticsEvents) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AnalyticsEvents with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AnalyticsEventsMultiError, or nil if none found.
func (m *AnalyticsEvents) ValidateAll() error {
	return m.validate(true)
}

func (m *AnalyticsEvents) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AnalyticsEventsValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AnalyticsEventsValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AnalyticsEventsValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AnalyticsEventsMultiError(errors)
	}

	return nil
}

// AnalyticsEventsMultiError is an error wrapping multiple validation errors
// returned by AnalyticsEvents.ValidateAll() if the designated constraints
// aren't met.
type AnalyticsEventsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnalyticsEventsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnalyticsEventsMultiError) AllErrors() []error { return m }

// AnalyticsEventsValidationError is the validation error returned by
// AnalyticsEvents.Validate if the designated constraints aren't met.
type AnalyticsEventsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnalyticsEventsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnalyticsEventsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnalyticsEventsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnalyticsEventsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnalyticsEventsValidationError) ErrorName() string { return "AnalyticsEventsValidationError" }

// Error satisfies the builtin error interface
func (e AnalyticsEventsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnalyticsEvents.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnalyticsEventsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnalyticsEventsValidationError{}

// Validate checks the field values on AnalyticsRoomParticipant with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AnalyticsRoomParticipant) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AnalyticsRoomParticipant with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AnalyticsRoomParticipantMultiError, or nil if none found.
func (m *AnalyticsRoomParticipant) ValidateAll() error {
	return m.validate(true)
}

func (m *AnalyticsRoomParticipant) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Identity

	// no validation rules for Name

	// no validation rules for State

	if all {
		switch v := interface{}(m.GetJoinedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AnalyticsRoomParticipantValidationError{
					field:  "JoinedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AnalyticsRoomParticipantValidationError{
					field:  "JoinedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJoinedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AnalyticsRoomParticipantValidationError{
				field:  "JoinedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AnalyticsRoomParticipantMultiError(errors)
	}

	return nil
}

// AnalyticsRoomParticipantMultiError is an error wrapping multiple validation
// errors returned by AnalyticsRoomParticipant.ValidateAll() if the designated
// constraints aren't met.
type AnalyticsRoomParticipantMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnalyticsRoomParticipantMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnalyticsRoomParticipantMultiError) AllErrors() []error { return m }

// AnalyticsRoomParticipantValidationError is the validation error returned by
// AnalyticsRoomParticipant.Validate if the designated constraints aren't met.
type AnalyticsRoomParticipantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnalyticsRoomParticipantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnalyticsRoomParticipantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnalyticsRoomParticipantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnalyticsRoomParticipantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnalyticsRoomParticipantValidationError) ErrorName() string {
	return "AnalyticsRoomParticipantValidationError"
}

// Error satisfies the builtin error interface
func (e AnalyticsRoomParticipantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnalyticsRoomParticipant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnalyticsRoomParticipantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnalyticsRoomParticipantValidationError{}

// Validate checks the field values on AnalyticsRoom with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AnalyticsRoom) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AnalyticsRoom with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AnalyticsRoomMultiError, or
// nil if none found.
func (m *AnalyticsRoom) ValidateAll() error {
	return m.validate(true)
}

func (m *AnalyticsRoom) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for ProjectId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AnalyticsRoomValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AnalyticsRoomValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AnalyticsRoomValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetParticipants() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AnalyticsRoomValidationError{
						field:  fmt.Sprintf("Participants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AnalyticsRoomValidationError{
						field:  fmt.Sprintf("Participants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AnalyticsRoomValidationError{
					field:  fmt.Sprintf("Participants[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AnalyticsRoomMultiError(errors)
	}

	return nil
}

// AnalyticsRoomMultiError is an error wrapping multiple validation errors
// returned by AnalyticsRoom.ValidateAll() if the designated constraints
// aren't met.
type AnalyticsRoomMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnalyticsRoomMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnalyticsRoomMultiError) AllErrors() []error { return m }

// AnalyticsRoomValidationError is the validation error returned by
// AnalyticsRoom.Validate if the designated constraints aren't met.
type AnalyticsRoomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnalyticsRoomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnalyticsRoomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnalyticsRoomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnalyticsRoomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnalyticsRoomValidationError) ErrorName() string { return "AnalyticsRoomValidationError" }

// Error satisfies the builtin error interface
func (e AnalyticsRoomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnalyticsRoom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnalyticsRoomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnalyticsRoomValidationError{}

// Validate checks the field values on AnalyticsNodeRooms with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AnalyticsNodeRooms) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AnalyticsNodeRooms with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AnalyticsNodeRoomsMultiError, or nil if none found.
func (m *AnalyticsNodeRooms) ValidateAll() error {
	return m.validate(true)
}

func (m *AnalyticsNodeRooms) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NodeId

	// no validation rules for SequenceNumber

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AnalyticsNodeRoomsValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AnalyticsNodeRoomsValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AnalyticsNodeRoomsValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRooms() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AnalyticsNodeRoomsValidationError{
						field:  fmt.Sprintf("Rooms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AnalyticsNodeRoomsValidationError{
						field:  fmt.Sprintf("Rooms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AnalyticsNodeRoomsValidationError{
					field:  fmt.Sprintf("Rooms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AnalyticsNodeRoomsMultiError(errors)
	}

	return nil
}

// AnalyticsNodeRoomsMultiError is an error wrapping multiple validation errors
// returned by AnalyticsNodeRooms.ValidateAll() if the designated constraints
// aren't met.
type AnalyticsNodeRoomsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnalyticsNodeRoomsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnalyticsNodeRoomsMultiError) AllErrors() []error { return m }

// AnalyticsNodeRoomsValidationError is the validation error returned by
// AnalyticsNodeRooms.Validate if the designated constraints aren't met.
type AnalyticsNodeRoomsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnalyticsNodeRoomsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnalyticsNodeRoomsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnalyticsNodeRoomsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnalyticsNodeRoomsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnalyticsNodeRoomsValidationError) ErrorName() string {
	return "AnalyticsNodeRoomsValidationError"
}

// Error satisfies the builtin error interface
func (e AnalyticsNodeRoomsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnalyticsNodeRooms.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnalyticsNodeRoomsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnalyticsNodeRoomsValidationError{}
