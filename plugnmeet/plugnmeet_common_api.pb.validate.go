// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: plugnmeet_common_api.proto

package plugnmeet

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CommonResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommonResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommonResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommonResponseMultiError,
// or nil if none found.
func (m *CommonResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommonResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Msg

	if len(errors) > 0 {
		return CommonResponseMultiError(errors)
	}

	return nil
}

// CommonResponseMultiError is an error wrapping multiple validation errors
// returned by CommonResponse.ValidateAll() if the designated constraints
// aren't met.
type CommonResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommonResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommonResponseMultiError) AllErrors() []error { return m }

// CommonResponseValidationError is the validation error returned by
// CommonResponse.Validate if the designated constraints aren't met.
type CommonResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonResponseValidationError) ErrorName() string { return "CommonResponseValidationError" }

// Error satisfies the builtin error interface
func (e CommonResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommonResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonResponseValidationError{}

// Validate checks the field values on VerifyTokenReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VerifyTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyTokenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VerifyTokenReqMultiError,
// or nil if none found.
func (m *VerifyTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.IsProduction != nil {
		// no validation rules for IsProduction
	}

	if len(errors) > 0 {
		return VerifyTokenReqMultiError(errors)
	}

	return nil
}

// VerifyTokenReqMultiError is an error wrapping multiple validation errors
// returned by VerifyTokenReq.ValidateAll() if the designated constraints
// aren't met.
type VerifyTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyTokenReqMultiError) AllErrors() []error { return m }

// VerifyTokenReqValidationError is the validation error returned by
// VerifyTokenReq.Validate if the designated constraints aren't met.
type VerifyTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyTokenReqValidationError) ErrorName() string { return "VerifyTokenReqValidationError" }

// Error satisfies the builtin error interface
func (e VerifyTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyTokenReqValidationError{}

// Validate checks the field values on VerifyTokenRes with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VerifyTokenRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyTokenRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VerifyTokenResMultiError,
// or nil if none found.
func (m *VerifyTokenRes) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyTokenRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Msg

	if m.LivekitHost != nil {
		// no validation rules for LivekitHost
	}

	if m.Token != nil {
		// no validation rules for Token
	}

	if len(errors) > 0 {
		return VerifyTokenResMultiError(errors)
	}

	return nil
}

// VerifyTokenResMultiError is an error wrapping multiple validation errors
// returned by VerifyTokenRes.ValidateAll() if the designated constraints
// aren't met.
type VerifyTokenResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyTokenResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyTokenResMultiError) AllErrors() []error { return m }

// VerifyTokenResValidationError is the validation error returned by
// VerifyTokenRes.Validate if the designated constraints aren't met.
type VerifyTokenResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyTokenResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyTokenResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyTokenResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyTokenResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyTokenResValidationError) ErrorName() string { return "VerifyTokenResValidationError" }

// Error satisfies the builtin error interface
func (e VerifyTokenResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyTokenRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyTokenResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyTokenResValidationError{}

// Validate checks the field values on MuteUnMuteTrackReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MuteUnMuteTrackReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MuteUnMuteTrackReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MuteUnMuteTrackReqMultiError, or nil if none found.
func (m *MuteUnMuteTrackReq) ValidateAll() error {
	return m.validate(true)
}

func (m *MuteUnMuteTrackReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sid

	// no validation rules for RoomId

	// no validation rules for UserId

	// no validation rules for TrackSid

	// no validation rules for Muted

	// no validation rules for RequestedUserId

	if len(errors) > 0 {
		return MuteUnMuteTrackReqMultiError(errors)
	}

	return nil
}

// MuteUnMuteTrackReqMultiError is an error wrapping multiple validation errors
// returned by MuteUnMuteTrackReq.ValidateAll() if the designated constraints
// aren't met.
type MuteUnMuteTrackReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MuteUnMuteTrackReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MuteUnMuteTrackReqMultiError) AllErrors() []error { return m }

// MuteUnMuteTrackReqValidationError is the validation error returned by
// MuteUnMuteTrackReq.Validate if the designated constraints aren't met.
type MuteUnMuteTrackReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MuteUnMuteTrackReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MuteUnMuteTrackReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MuteUnMuteTrackReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MuteUnMuteTrackReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MuteUnMuteTrackReqValidationError) ErrorName() string {
	return "MuteUnMuteTrackReqValidationError"
}

// Error satisfies the builtin error interface
func (e MuteUnMuteTrackReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMuteUnMuteTrackReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MuteUnMuteTrackReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MuteUnMuteTrackReqValidationError{}

// Validate checks the field values on RemoveParticipantReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveParticipantReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveParticipantReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveParticipantReqMultiError, or nil if none found.
func (m *RemoveParticipantReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveParticipantReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sid

	// no validation rules for RoomId

	// no validation rules for UserId

	// no validation rules for Msg

	// no validation rules for BlockUser

	if len(errors) > 0 {
		return RemoveParticipantReqMultiError(errors)
	}

	return nil
}

// RemoveParticipantReqMultiError is an error wrapping multiple validation
// errors returned by RemoveParticipantReq.ValidateAll() if the designated
// constraints aren't met.
type RemoveParticipantReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveParticipantReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveParticipantReqMultiError) AllErrors() []error { return m }

// RemoveParticipantReqValidationError is the validation error returned by
// RemoveParticipantReq.Validate if the designated constraints aren't met.
type RemoveParticipantReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveParticipantReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveParticipantReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveParticipantReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveParticipantReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveParticipantReqValidationError) ErrorName() string {
	return "RemoveParticipantReqValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveParticipantReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveParticipantReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveParticipantReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveParticipantReqValidationError{}

// Validate checks the field values on DataMessageReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DataMessageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataMessageReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DataMessageReqMultiError,
// or nil if none found.
func (m *DataMessageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DataMessageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	// no validation rules for RoomSid

	// no validation rules for UserId

	// no validation rules for UserSid

	// no validation rules for MsgBodyType

	// no validation rules for Msg

	// no validation rules for RequestedUserId

	// no validation rules for IsAdmin

	if len(errors) > 0 {
		return DataMessageReqMultiError(errors)
	}

	return nil
}

// DataMessageReqMultiError is an error wrapping multiple validation errors
// returned by DataMessageReq.ValidateAll() if the designated constraints
// aren't met.
type DataMessageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataMessageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataMessageReqMultiError) AllErrors() []error { return m }

// DataMessageReqValidationError is the validation error returned by
// DataMessageReq.Validate if the designated constraints aren't met.
type DataMessageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataMessageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataMessageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataMessageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataMessageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataMessageReqValidationError) ErrorName() string { return "DataMessageReqValidationError" }

// Error satisfies the builtin error interface
func (e DataMessageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataMessageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataMessageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataMessageReqValidationError{}

// Validate checks the field values on RoomEndAPIReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoomEndAPIReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomEndAPIReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoomEndAPIReqMultiError, or
// nil if none found.
func (m *RoomEndAPIReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomEndAPIReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	if len(errors) > 0 {
		return RoomEndAPIReqMultiError(errors)
	}

	return nil
}

// RoomEndAPIReqMultiError is an error wrapping multiple validation errors
// returned by RoomEndAPIReq.ValidateAll() if the designated constraints
// aren't met.
type RoomEndAPIReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomEndAPIReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomEndAPIReqMultiError) AllErrors() []error { return m }

// RoomEndAPIReqValidationError is the validation error returned by
// RoomEndAPIReq.Validate if the designated constraints aren't met.
type RoomEndAPIReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomEndAPIReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomEndAPIReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomEndAPIReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomEndAPIReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomEndAPIReqValidationError) ErrorName() string { return "RoomEndAPIReqValidationError" }

// Error satisfies the builtin error interface
func (e RoomEndAPIReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomEndAPIReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomEndAPIReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomEndAPIReqValidationError{}

// Validate checks the field values on ChangeVisibilityRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeVisibilityRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeVisibilityRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeVisibilityResMultiError, or nil if none found.
func (m *ChangeVisibilityRes) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeVisibilityRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	if m.VisibleNotepad != nil {
		// no validation rules for VisibleNotepad
	}

	if m.VisibleWhiteBoard != nil {
		// no validation rules for VisibleWhiteBoard
	}

	if len(errors) > 0 {
		return ChangeVisibilityResMultiError(errors)
	}

	return nil
}

// ChangeVisibilityResMultiError is an error wrapping multiple validation
// errors returned by ChangeVisibilityRes.ValidateAll() if the designated
// constraints aren't met.
type ChangeVisibilityResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeVisibilityResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeVisibilityResMultiError) AllErrors() []error { return m }

// ChangeVisibilityResValidationError is the validation error returned by
// ChangeVisibilityRes.Validate if the designated constraints aren't met.
type ChangeVisibilityResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeVisibilityResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeVisibilityResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeVisibilityResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeVisibilityResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeVisibilityResValidationError) ErrorName() string {
	return "ChangeVisibilityResValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeVisibilityResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeVisibilityRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeVisibilityResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeVisibilityResValidationError{}

// Validate checks the field values on SwitchPresenterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SwitchPresenterReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SwitchPresenterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SwitchPresenterReqMultiError, or nil if none found.
func (m *SwitchPresenterReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SwitchPresenterReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Task

	// no validation rules for UserId

	// no validation rules for RoomId

	// no validation rules for RequestedUserId

	if len(errors) > 0 {
		return SwitchPresenterReqMultiError(errors)
	}

	return nil
}

// SwitchPresenterReqMultiError is an error wrapping multiple validation errors
// returned by SwitchPresenterReq.ValidateAll() if the designated constraints
// aren't met.
type SwitchPresenterReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SwitchPresenterReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SwitchPresenterReqMultiError) AllErrors() []error { return m }

// SwitchPresenterReqValidationError is the validation error returned by
// SwitchPresenterReq.Validate if the designated constraints aren't met.
type SwitchPresenterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SwitchPresenterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SwitchPresenterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SwitchPresenterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SwitchPresenterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SwitchPresenterReqValidationError) ErrorName() string {
	return "SwitchPresenterReqValidationError"
}

// Error satisfies the builtin error interface
func (e SwitchPresenterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSwitchPresenterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SwitchPresenterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SwitchPresenterReqValidationError{}

// Validate checks the field values on ExternalMediaPlayerReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExternalMediaPlayerReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExternalMediaPlayerReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExternalMediaPlayerReqMultiError, or nil if none found.
func (m *ExternalMediaPlayerReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ExternalMediaPlayerReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Task

	// no validation rules for RoomId

	// no validation rules for UserId

	if m.Url != nil {
		// no validation rules for Url
	}

	if m.SeekTo != nil {
		// no validation rules for SeekTo
	}

	if len(errors) > 0 {
		return ExternalMediaPlayerReqMultiError(errors)
	}

	return nil
}

// ExternalMediaPlayerReqMultiError is an error wrapping multiple validation
// errors returned by ExternalMediaPlayerReq.ValidateAll() if the designated
// constraints aren't met.
type ExternalMediaPlayerReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExternalMediaPlayerReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExternalMediaPlayerReqMultiError) AllErrors() []error { return m }

// ExternalMediaPlayerReqValidationError is the validation error returned by
// ExternalMediaPlayerReq.Validate if the designated constraints aren't met.
type ExternalMediaPlayerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExternalMediaPlayerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExternalMediaPlayerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExternalMediaPlayerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExternalMediaPlayerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExternalMediaPlayerReqValidationError) ErrorName() string {
	return "ExternalMediaPlayerReqValidationError"
}

// Error satisfies the builtin error interface
func (e ExternalMediaPlayerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExternalMediaPlayerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExternalMediaPlayerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExternalMediaPlayerReqValidationError{}
